// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_login_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_login_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_2eproto;
namespace LoginProtocol {
class C2S_LoginCreate;
class C2S_LoginCreateDefaultTypeInternal;
extern C2S_LoginCreateDefaultTypeInternal _C2S_LoginCreate_default_instance_;
class C2S_LoginLoad;
class C2S_LoginLoadDefaultTypeInternal;
extern C2S_LoginLoadDefaultTypeInternal _C2S_LoginLoad_default_instance_;
class C2S_LoginLogin;
class C2S_LoginLoginDefaultTypeInternal;
extern C2S_LoginLoginDefaultTypeInternal _C2S_LoginLogin_default_instance_;
class C2S_LoginOpenid;
class C2S_LoginOpenidDefaultTypeInternal;
extern C2S_LoginOpenidDefaultTypeInternal _C2S_LoginOpenid_default_instance_;
class C2S_LoginUpdate;
class C2S_LoginUpdateDefaultTypeInternal;
extern C2S_LoginUpdateDefaultTypeInternal _C2S_LoginUpdate_default_instance_;
class GameInfo;
class GameInfoDefaultTypeInternal;
extern GameInfoDefaultTypeInternal _GameInfo_default_instance_;
class S2C_LoginCreate;
class S2C_LoginCreateDefaultTypeInternal;
extern S2C_LoginCreateDefaultTypeInternal _S2C_LoginCreate_default_instance_;
class S2C_LoginLoad;
class S2C_LoginLoadDefaultTypeInternal;
extern S2C_LoginLoadDefaultTypeInternal _S2C_LoginLoad_default_instance_;
class S2C_LoginLogin;
class S2C_LoginLoginDefaultTypeInternal;
extern S2C_LoginLoginDefaultTypeInternal _S2C_LoginLogin_default_instance_;
class S2C_LoginOpenid;
class S2C_LoginOpenidDefaultTypeInternal;
extern S2C_LoginOpenidDefaultTypeInternal _S2C_LoginOpenid_default_instance_;
class S2C_LoginUpdate;
class S2C_LoginUpdateDefaultTypeInternal;
extern S2C_LoginUpdateDefaultTypeInternal _S2C_LoginUpdate_default_instance_;
}  // namespace LoginProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::LoginProtocol::C2S_LoginCreate* Arena::CreateMaybeMessage<::LoginProtocol::C2S_LoginCreate>(Arena*);
template<> ::LoginProtocol::C2S_LoginLoad* Arena::CreateMaybeMessage<::LoginProtocol::C2S_LoginLoad>(Arena*);
template<> ::LoginProtocol::C2S_LoginLogin* Arena::CreateMaybeMessage<::LoginProtocol::C2S_LoginLogin>(Arena*);
template<> ::LoginProtocol::C2S_LoginOpenid* Arena::CreateMaybeMessage<::LoginProtocol::C2S_LoginOpenid>(Arena*);
template<> ::LoginProtocol::C2S_LoginUpdate* Arena::CreateMaybeMessage<::LoginProtocol::C2S_LoginUpdate>(Arena*);
template<> ::LoginProtocol::GameInfo* Arena::CreateMaybeMessage<::LoginProtocol::GameInfo>(Arena*);
template<> ::LoginProtocol::S2C_LoginCreate* Arena::CreateMaybeMessage<::LoginProtocol::S2C_LoginCreate>(Arena*);
template<> ::LoginProtocol::S2C_LoginLoad* Arena::CreateMaybeMessage<::LoginProtocol::S2C_LoginLoad>(Arena*);
template<> ::LoginProtocol::S2C_LoginLogin* Arena::CreateMaybeMessage<::LoginProtocol::S2C_LoginLogin>(Arena*);
template<> ::LoginProtocol::S2C_LoginOpenid* Arena::CreateMaybeMessage<::LoginProtocol::S2C_LoginOpenid>(Arena*);
template<> ::LoginProtocol::S2C_LoginUpdate* Arena::CreateMaybeMessage<::LoginProtocol::S2C_LoginUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LoginProtocol {

// ===================================================================

class GameInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginProtocol.GameInfo) */ {
 public:
  GameInfo();
  virtual ~GameInfo();

  GameInfo(const GameInfo& from);
  GameInfo(GameInfo&& from) noexcept
    : GameInfo() {
    *this = ::std::move(from);
  }

  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameInfo& operator=(GameInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameInfo* internal_default_instance() {
    return reinterpret_cast<const GameInfo*>(
               &_GameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameInfo& a, GameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameInfo* New() const final {
    return CreateMaybeMessage<GameInfo>(nullptr);
  }

  GameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameInfo& from);
  void MergeFrom(const GameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginProtocol.GameInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kAppidFieldNumber = 4,
    kSecretFieldNumber = 5,
    kGameidFieldNumber = 1,
    kPlatformFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string appid = 4;
  void clear_appid();
  const std::string& appid() const;
  void set_appid(const std::string& value);
  void set_appid(std::string&& value);
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  std::string* mutable_appid();
  std::string* release_appid();
  void set_allocated_appid(std::string* appid);
  private:
  const std::string& _internal_appid() const;
  void _internal_set_appid(const std::string& value);
  std::string* _internal_mutable_appid();
  public:

  // string secret = 5;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // int32 gameid = 1;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 platform = 2;
  void clear_platform();
  ::PROTOBUF_NAMESPACE_ID::int32 platform() const;
  void set_platform(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_platform() const;
  void _internal_set_platform(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginProtocol.GameInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  ::PROTOBUF_NAMESPACE_ID::int32 platform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoginLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginProtocol.C2S_LoginLogin) */ {
 public:
  C2S_LoginLogin();
  virtual ~C2S_LoginLogin();

  C2S_LoginLogin(const C2S_LoginLogin& from);
  C2S_LoginLogin(C2S_LoginLogin&& from) noexcept
    : C2S_LoginLogin() {
    *this = ::std::move(from);
  }

  inline C2S_LoginLogin& operator=(const C2S_LoginLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoginLogin& operator=(C2S_LoginLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_LoginLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_LoginLogin* internal_default_instance() {
    return reinterpret_cast<const C2S_LoginLogin*>(
               &_C2S_LoginLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C2S_LoginLogin& a, C2S_LoginLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoginLogin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_LoginLogin* New() const final {
    return CreateMaybeMessage<C2S_LoginLogin>(nullptr);
  }

  C2S_LoginLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_LoginLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_LoginLogin& from);
  void MergeFrom(const C2S_LoginLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LoginLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginProtocol.C2S_LoginLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginnameFieldNumber = 1,
  };
  // string loginname = 1;
  void clear_loginname();
  const std::string& loginname() const;
  void set_loginname(const std::string& value);
  void set_loginname(std::string&& value);
  void set_loginname(const char* value);
  void set_loginname(const char* value, size_t size);
  std::string* mutable_loginname();
  std::string* release_loginname();
  void set_allocated_loginname(std::string* loginname);
  private:
  const std::string& _internal_loginname() const;
  void _internal_set_loginname(const std::string& value);
  std::string* _internal_mutable_loginname();
  public:

  // @@protoc_insertion_point(class_scope:LoginProtocol.C2S_LoginLogin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoginLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginProtocol.S2C_LoginLogin) */ {
 public:
  S2C_LoginLogin();
  virtual ~S2C_LoginLogin();

  S2C_LoginLogin(const S2C_LoginLogin& from);
  S2C_LoginLogin(S2C_LoginLogin&& from) noexcept
    : S2C_LoginLogin() {
    *this = ::std::move(from);
  }

  inline S2C_LoginLogin& operator=(const S2C_LoginLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoginLogin& operator=(S2C_LoginLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_LoginLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_LoginLogin* internal_default_instance() {
    return reinterpret_cast<const S2C_LoginLogin*>(
               &_S2C_LoginLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S2C_LoginLogin& a, S2C_LoginLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoginLogin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_LoginLogin* New() const final {
    return CreateMaybeMessage<S2C_LoginLogin>(nullptr);
  }

  S2C_LoginLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_LoginLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_LoginLogin& from);
  void MergeFrom(const S2C_LoginLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoginLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginProtocol.S2C_LoginLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // int64 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginProtocol.S2C_LoginLogin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoginCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginProtocol.C2S_LoginCreate) */ {
 public:
  C2S_LoginCreate();
  virtual ~C2S_LoginCreate();

  C2S_LoginCreate(const C2S_LoginCreate& from);
  C2S_LoginCreate(C2S_LoginCreate&& from) noexcept
    : C2S_LoginCreate() {
    *this = ::std::move(from);
  }

  inline C2S_LoginCreate& operator=(const C2S_LoginCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoginCreate& operator=(C2S_LoginCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_LoginCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_LoginCreate* internal_default_instance() {
    return reinterpret_cast<const C2S_LoginCreate*>(
               &_C2S_LoginCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C2S_LoginCreate& a, C2S_LoginCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoginCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_LoginCreate* New() const final {
    return CreateMaybeMessage<C2S_LoginCreate>(nullptr);
  }

  C2S_LoginCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_LoginCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_LoginCreate& from);
  void MergeFrom(const C2S_LoginCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LoginCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginProtocol.C2S_LoginCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginnameFieldNumber = 2,
    kRoleNameFieldNumber = 3,
    kAvatarurlFieldNumber = 4,
    kGameidFieldNumber = 1,
  };
  // string loginname = 2;
  void clear_loginname();
  const std::string& loginname() const;
  void set_loginname(const std::string& value);
  void set_loginname(std::string&& value);
  void set_loginname(const char* value);
  void set_loginname(const char* value, size_t size);
  std::string* mutable_loginname();
  std::string* release_loginname();
  void set_allocated_loginname(std::string* loginname);
  private:
  const std::string& _internal_loginname() const;
  void _internal_set_loginname(const std::string& value);
  std::string* _internal_mutable_loginname();
  public:

  // string role_name = 3;
  void clear_role_name();
  const std::string& role_name() const;
  void set_role_name(const std::string& value);
  void set_role_name(std::string&& value);
  void set_role_name(const char* value);
  void set_role_name(const char* value, size_t size);
  std::string* mutable_role_name();
  std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // string avatarurl = 4;
  void clear_avatarurl();
  const std::string& avatarurl() const;
  void set_avatarurl(const std::string& value);
  void set_avatarurl(std::string&& value);
  void set_avatarurl(const char* value);
  void set_avatarurl(const char* value, size_t size);
  std::string* mutable_avatarurl();
  std::string* release_avatarurl();
  void set_allocated_avatarurl(std::string* avatarurl);
  private:
  const std::string& _internal_avatarurl() const;
  void _internal_set_avatarurl(const std::string& value);
  std::string* _internal_mutable_avatarurl();
  public:

  // int32 gameid = 1;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginProtocol.C2S_LoginCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatarurl_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoginCreate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginProtocol.S2C_LoginCreate) */ {
 public:
  S2C_LoginCreate();
  virtual ~S2C_LoginCreate();

  S2C_LoginCreate(const S2C_LoginCreate& from);
  S2C_LoginCreate(S2C_LoginCreate&& from) noexcept
    : S2C_LoginCreate() {
    *this = ::std::move(from);
  }

  inline S2C_LoginCreate& operator=(const S2C_LoginCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoginCreate& operator=(S2C_LoginCreate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_LoginCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_LoginCreate* internal_default_instance() {
    return reinterpret_cast<const S2C_LoginCreate*>(
               &_S2C_LoginCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S2C_LoginCreate& a, S2C_LoginCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoginCreate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_LoginCreate* New() const final {
    return CreateMaybeMessage<S2C_LoginCreate>(nullptr);
  }

  S2C_LoginCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_LoginCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_LoginCreate& from);
  void MergeFrom(const S2C_LoginCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoginCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginProtocol.S2C_LoginCreate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // int64 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginProtocol.S2C_LoginCreate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoginLoad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginProtocol.C2S_LoginLoad) */ {
 public:
  C2S_LoginLoad();
  virtual ~C2S_LoginLoad();

  C2S_LoginLoad(const C2S_LoginLoad& from);
  C2S_LoginLoad(C2S_LoginLoad&& from) noexcept
    : C2S_LoginLoad() {
    *this = ::std::move(from);
  }

  inline C2S_LoginLoad& operator=(const C2S_LoginLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoginLoad& operator=(C2S_LoginLoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_LoginLoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_LoginLoad* internal_default_instance() {
    return reinterpret_cast<const C2S_LoginLoad*>(
               &_C2S_LoginLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C2S_LoginLoad& a, C2S_LoginLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoginLoad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_LoginLoad* New() const final {
    return CreateMaybeMessage<C2S_LoginLoad>(nullptr);
  }

  C2S_LoginLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_LoginLoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_LoginLoad& from);
  void MergeFrom(const C2S_LoginLoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LoginLoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginProtocol.C2S_LoginLoad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginnameFieldNumber = 3,
    kRoleIdFieldNumber = 1,
    kGameidFieldNumber = 2,
  };
  // string loginname = 3;
  void clear_loginname();
  const std::string& loginname() const;
  void set_loginname(const std::string& value);
  void set_loginname(std::string&& value);
  void set_loginname(const char* value);
  void set_loginname(const char* value, size_t size);
  std::string* mutable_loginname();
  std::string* release_loginname();
  void set_allocated_loginname(std::string* loginname);
  private:
  const std::string& _internal_loginname() const;
  void _internal_set_loginname(const std::string& value);
  std::string* _internal_mutable_loginname();
  public:

  // int64 role_id = 1;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 gameid = 2;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginProtocol.C2S_LoginLoad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginname_;
  ::PROTOBUF_NAMESPACE_ID::int64 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoginLoad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginProtocol.S2C_LoginLoad) */ {
 public:
  S2C_LoginLoad();
  virtual ~S2C_LoginLoad();

  S2C_LoginLoad(const S2C_LoginLoad& from);
  S2C_LoginLoad(S2C_LoginLoad&& from) noexcept
    : S2C_LoginLoad() {
    *this = ::std::move(from);
  }

  inline S2C_LoginLoad& operator=(const S2C_LoginLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoginLoad& operator=(S2C_LoginLoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_LoginLoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_LoginLoad* internal_default_instance() {
    return reinterpret_cast<const S2C_LoginLoad*>(
               &_S2C_LoginLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S2C_LoginLoad& a, S2C_LoginLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoginLoad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_LoginLoad* New() const final {
    return CreateMaybeMessage<S2C_LoginLoad>(nullptr);
  }

  S2C_LoginLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_LoginLoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_LoginLoad& from);
  void MergeFrom(const S2C_LoginLoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoginLoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginProtocol.S2C_LoginLoad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginnameFieldNumber = 4,
    kRoleIdFieldNumber = 2,
    kRetFieldNumber = 1,
    kGameidFieldNumber = 3,
  };
  // string loginname = 4;
  void clear_loginname();
  const std::string& loginname() const;
  void set_loginname(const std::string& value);
  void set_loginname(std::string&& value);
  void set_loginname(const char* value);
  void set_loginname(const char* value, size_t size);
  std::string* mutable_loginname();
  std::string* release_loginname();
  void set_allocated_loginname(std::string* loginname);
  private:
  const std::string& _internal_loginname() const;
  void _internal_set_loginname(const std::string& value);
  std::string* _internal_mutable_loginname();
  public:

  // int64 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gameid = 3;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginProtocol.S2C_LoginLoad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginname_;
  ::PROTOBUF_NAMESPACE_ID::int64 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoginOpenid :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginProtocol.C2S_LoginOpenid) */ {
 public:
  C2S_LoginOpenid();
  virtual ~C2S_LoginOpenid();

  C2S_LoginOpenid(const C2S_LoginOpenid& from);
  C2S_LoginOpenid(C2S_LoginOpenid&& from) noexcept
    : C2S_LoginOpenid() {
    *this = ::std::move(from);
  }

  inline C2S_LoginOpenid& operator=(const C2S_LoginOpenid& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoginOpenid& operator=(C2S_LoginOpenid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_LoginOpenid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_LoginOpenid* internal_default_instance() {
    return reinterpret_cast<const C2S_LoginOpenid*>(
               &_C2S_LoginOpenid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C2S_LoginOpenid& a, C2S_LoginOpenid& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoginOpenid* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_LoginOpenid* New() const final {
    return CreateMaybeMessage<C2S_LoginOpenid>(nullptr);
  }

  C2S_LoginOpenid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_LoginOpenid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_LoginOpenid& from);
  void MergeFrom(const C2S_LoginOpenid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LoginOpenid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginProtocol.C2S_LoginOpenid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kGameidFieldNumber = 1,
  };
  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // int32 gameid = 1;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginProtocol.C2S_LoginOpenid)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoginOpenid :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginProtocol.S2C_LoginOpenid) */ {
 public:
  S2C_LoginOpenid();
  virtual ~S2C_LoginOpenid();

  S2C_LoginOpenid(const S2C_LoginOpenid& from);
  S2C_LoginOpenid(S2C_LoginOpenid&& from) noexcept
    : S2C_LoginOpenid() {
    *this = ::std::move(from);
  }

  inline S2C_LoginOpenid& operator=(const S2C_LoginOpenid& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoginOpenid& operator=(S2C_LoginOpenid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_LoginOpenid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_LoginOpenid* internal_default_instance() {
    return reinterpret_cast<const S2C_LoginOpenid*>(
               &_S2C_LoginOpenid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S2C_LoginOpenid& a, S2C_LoginOpenid& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoginOpenid* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_LoginOpenid* New() const final {
    return CreateMaybeMessage<S2C_LoginOpenid>(nullptr);
  }

  S2C_LoginOpenid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_LoginOpenid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_LoginOpenid& from);
  void MergeFrom(const S2C_LoginOpenid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoginOpenid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginProtocol.S2C_LoginOpenid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenidFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // string openid = 2;
  void clear_openid();
  const std::string& openid() const;
  void set_openid(const std::string& value);
  void set_openid(std::string&& value);
  void set_openid(const char* value);
  void set_openid(const char* value, size_t size);
  std::string* mutable_openid();
  std::string* release_openid();
  void set_allocated_openid(std::string* openid);
  private:
  const std::string& _internal_openid() const;
  void _internal_set_openid(const std::string& value);
  std::string* _internal_mutable_openid();
  public:

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginProtocol.S2C_LoginOpenid)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoginUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginProtocol.C2S_LoginUpdate) */ {
 public:
  C2S_LoginUpdate();
  virtual ~C2S_LoginUpdate();

  C2S_LoginUpdate(const C2S_LoginUpdate& from);
  C2S_LoginUpdate(C2S_LoginUpdate&& from) noexcept
    : C2S_LoginUpdate() {
    *this = ::std::move(from);
  }

  inline C2S_LoginUpdate& operator=(const C2S_LoginUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoginUpdate& operator=(C2S_LoginUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_LoginUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_LoginUpdate* internal_default_instance() {
    return reinterpret_cast<const C2S_LoginUpdate*>(
               &_C2S_LoginUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C2S_LoginUpdate& a, C2S_LoginUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoginUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_LoginUpdate* New() const final {
    return CreateMaybeMessage<C2S_LoginUpdate>(nullptr);
  }

  C2S_LoginUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_LoginUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_LoginUpdate& from);
  void MergeFrom(const C2S_LoginUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LoginUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginProtocol.C2S_LoginUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 1,
    kAvatarurlFieldNumber = 2,
  };
  // string role_name = 1;
  void clear_role_name();
  const std::string& role_name() const;
  void set_role_name(const std::string& value);
  void set_role_name(std::string&& value);
  void set_role_name(const char* value);
  void set_role_name(const char* value, size_t size);
  std::string* mutable_role_name();
  std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // string avatarurl = 2;
  void clear_avatarurl();
  const std::string& avatarurl() const;
  void set_avatarurl(const std::string& value);
  void set_avatarurl(std::string&& value);
  void set_avatarurl(const char* value);
  void set_avatarurl(const char* value, size_t size);
  std::string* mutable_avatarurl();
  std::string* release_avatarurl();
  void set_allocated_avatarurl(std::string* avatarurl);
  private:
  const std::string& _internal_avatarurl() const;
  void _internal_set_avatarurl(const std::string& value);
  std::string* _internal_mutable_avatarurl();
  public:

  // @@protoc_insertion_point(class_scope:LoginProtocol.C2S_LoginUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatarurl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoginUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginProtocol.S2C_LoginUpdate) */ {
 public:
  S2C_LoginUpdate();
  virtual ~S2C_LoginUpdate();

  S2C_LoginUpdate(const S2C_LoginUpdate& from);
  S2C_LoginUpdate(S2C_LoginUpdate&& from) noexcept
    : S2C_LoginUpdate() {
    *this = ::std::move(from);
  }

  inline S2C_LoginUpdate& operator=(const S2C_LoginUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoginUpdate& operator=(S2C_LoginUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_LoginUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_LoginUpdate* internal_default_instance() {
    return reinterpret_cast<const S2C_LoginUpdate*>(
               &_S2C_LoginUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S2C_LoginUpdate& a, S2C_LoginUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoginUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_LoginUpdate* New() const final {
    return CreateMaybeMessage<S2C_LoginUpdate>(nullptr);
  }

  S2C_LoginUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_LoginUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_LoginUpdate& from);
  void MergeFrom(const S2C_LoginUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoginUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginProtocol.S2C_LoginUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginProtocol.S2C_LoginUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameInfo

// int32 gameid = 1;
inline void GameInfo::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameInfo::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameInfo::gameid() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.GameInfo.gameid)
  return _internal_gameid();
}
inline void GameInfo::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void GameInfo::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.GameInfo.gameid)
}

// int32 platform = 2;
inline void GameInfo::clear_platform() {
  platform_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameInfo::_internal_platform() const {
  return platform_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameInfo::platform() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.GameInfo.platform)
  return _internal_platform();
}
inline void GameInfo::_internal_set_platform(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  platform_ = value;
}
inline void GameInfo::set_platform(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.GameInfo.platform)
}

// string name = 3;
inline void GameInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameInfo::name() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.GameInfo.name)
  return _internal_name();
}
inline void GameInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.GameInfo.name)
}
inline std::string* GameInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:LoginProtocol.GameInfo.name)
  return _internal_mutable_name();
}
inline const std::string& GameInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void GameInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginProtocol.GameInfo.name)
}
inline void GameInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.GameInfo.name)
}
inline void GameInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.GameInfo.name)
}
inline std::string* GameInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameInfo::release_name() {
  // @@protoc_insertion_point(field_release:LoginProtocol.GameInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.GameInfo.name)
}

// string appid = 4;
inline void GameInfo::clear_appid() {
  appid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameInfo::appid() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.GameInfo.appid)
  return _internal_appid();
}
inline void GameInfo::set_appid(const std::string& value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.GameInfo.appid)
}
inline std::string* GameInfo::mutable_appid() {
  // @@protoc_insertion_point(field_mutable:LoginProtocol.GameInfo.appid)
  return _internal_mutable_appid();
}
inline const std::string& GameInfo::_internal_appid() const {
  return appid_.GetNoArena();
}
inline void GameInfo::_internal_set_appid(const std::string& value) {
  
  appid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameInfo::set_appid(std::string&& value) {
  
  appid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginProtocol.GameInfo.appid)
}
inline void GameInfo::set_appid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  appid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.GameInfo.appid)
}
inline void GameInfo::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.GameInfo.appid)
}
inline std::string* GameInfo::_internal_mutable_appid() {
  
  return appid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameInfo::release_appid() {
  // @@protoc_insertion_point(field_release:LoginProtocol.GameInfo.appid)
  
  return appid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameInfo::set_allocated_appid(std::string* appid) {
  if (appid != nullptr) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.GameInfo.appid)
}

// string secret = 5;
inline void GameInfo::clear_secret() {
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameInfo::secret() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.GameInfo.secret)
  return _internal_secret();
}
inline void GameInfo::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.GameInfo.secret)
}
inline std::string* GameInfo::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:LoginProtocol.GameInfo.secret)
  return _internal_mutable_secret();
}
inline const std::string& GameInfo::_internal_secret() const {
  return secret_.GetNoArena();
}
inline void GameInfo::_internal_set_secret(const std::string& value) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameInfo::set_secret(std::string&& value) {
  
  secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginProtocol.GameInfo.secret)
}
inline void GameInfo::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.GameInfo.secret)
}
inline void GameInfo::set_secret(const char* value, size_t size) {
  
  secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.GameInfo.secret)
}
inline std::string* GameInfo::_internal_mutable_secret() {
  
  return secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameInfo::release_secret() {
  // @@protoc_insertion_point(field_release:LoginProtocol.GameInfo.secret)
  
  return secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameInfo::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.GameInfo.secret)
}

// -------------------------------------------------------------------

// C2S_LoginLogin

// string loginname = 1;
inline void C2S_LoginLogin::clear_loginname() {
  loginname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_LoginLogin::loginname() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.C2S_LoginLogin.loginname)
  return _internal_loginname();
}
inline void C2S_LoginLogin::set_loginname(const std::string& value) {
  _internal_set_loginname(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.C2S_LoginLogin.loginname)
}
inline std::string* C2S_LoginLogin::mutable_loginname() {
  // @@protoc_insertion_point(field_mutable:LoginProtocol.C2S_LoginLogin.loginname)
  return _internal_mutable_loginname();
}
inline const std::string& C2S_LoginLogin::_internal_loginname() const {
  return loginname_.GetNoArena();
}
inline void C2S_LoginLogin::_internal_set_loginname(const std::string& value) {
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_LoginLogin::set_loginname(std::string&& value) {
  
  loginname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginProtocol.C2S_LoginLogin.loginname)
}
inline void C2S_LoginLogin::set_loginname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.C2S_LoginLogin.loginname)
}
inline void C2S_LoginLogin::set_loginname(const char* value, size_t size) {
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.C2S_LoginLogin.loginname)
}
inline std::string* C2S_LoginLogin::_internal_mutable_loginname() {
  
  return loginname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_LoginLogin::release_loginname() {
  // @@protoc_insertion_point(field_release:LoginProtocol.C2S_LoginLogin.loginname)
  
  return loginname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_LoginLogin::set_allocated_loginname(std::string* loginname) {
  if (loginname != nullptr) {
    
  } else {
    
  }
  loginname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginname);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.C2S_LoginLogin.loginname)
}

// -------------------------------------------------------------------

// S2C_LoginLogin

// int32 ret = 1;
inline void S2C_LoginLogin::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LoginLogin::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LoginLogin::ret() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.S2C_LoginLogin.ret)
  return _internal_ret();
}
inline void S2C_LoginLogin::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void S2C_LoginLogin::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.S2C_LoginLogin.ret)
}

// int64 role_id = 2;
inline void S2C_LoginLogin::clear_role_id() {
  role_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2C_LoginLogin::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2C_LoginLogin::role_id() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.S2C_LoginLogin.role_id)
  return _internal_role_id();
}
inline void S2C_LoginLogin::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  role_id_ = value;
}
inline void S2C_LoginLogin::set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.S2C_LoginLogin.role_id)
}

// -------------------------------------------------------------------

// C2S_LoginCreate

// int32 gameid = 1;
inline void C2S_LoginCreate::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_LoginCreate::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_LoginCreate::gameid() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.C2S_LoginCreate.gameid)
  return _internal_gameid();
}
inline void C2S_LoginCreate::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void C2S_LoginCreate::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.C2S_LoginCreate.gameid)
}

// string loginname = 2;
inline void C2S_LoginCreate::clear_loginname() {
  loginname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_LoginCreate::loginname() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.C2S_LoginCreate.loginname)
  return _internal_loginname();
}
inline void C2S_LoginCreate::set_loginname(const std::string& value) {
  _internal_set_loginname(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.C2S_LoginCreate.loginname)
}
inline std::string* C2S_LoginCreate::mutable_loginname() {
  // @@protoc_insertion_point(field_mutable:LoginProtocol.C2S_LoginCreate.loginname)
  return _internal_mutable_loginname();
}
inline const std::string& C2S_LoginCreate::_internal_loginname() const {
  return loginname_.GetNoArena();
}
inline void C2S_LoginCreate::_internal_set_loginname(const std::string& value) {
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_LoginCreate::set_loginname(std::string&& value) {
  
  loginname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginProtocol.C2S_LoginCreate.loginname)
}
inline void C2S_LoginCreate::set_loginname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.C2S_LoginCreate.loginname)
}
inline void C2S_LoginCreate::set_loginname(const char* value, size_t size) {
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.C2S_LoginCreate.loginname)
}
inline std::string* C2S_LoginCreate::_internal_mutable_loginname() {
  
  return loginname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_LoginCreate::release_loginname() {
  // @@protoc_insertion_point(field_release:LoginProtocol.C2S_LoginCreate.loginname)
  
  return loginname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_LoginCreate::set_allocated_loginname(std::string* loginname) {
  if (loginname != nullptr) {
    
  } else {
    
  }
  loginname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginname);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.C2S_LoginCreate.loginname)
}

// string role_name = 3;
inline void C2S_LoginCreate::clear_role_name() {
  role_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_LoginCreate::role_name() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.C2S_LoginCreate.role_name)
  return _internal_role_name();
}
inline void C2S_LoginCreate::set_role_name(const std::string& value) {
  _internal_set_role_name(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.C2S_LoginCreate.role_name)
}
inline std::string* C2S_LoginCreate::mutable_role_name() {
  // @@protoc_insertion_point(field_mutable:LoginProtocol.C2S_LoginCreate.role_name)
  return _internal_mutable_role_name();
}
inline const std::string& C2S_LoginCreate::_internal_role_name() const {
  return role_name_.GetNoArena();
}
inline void C2S_LoginCreate::_internal_set_role_name(const std::string& value) {
  
  role_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_LoginCreate::set_role_name(std::string&& value) {
  
  role_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginProtocol.C2S_LoginCreate.role_name)
}
inline void C2S_LoginCreate::set_role_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.C2S_LoginCreate.role_name)
}
inline void C2S_LoginCreate::set_role_name(const char* value, size_t size) {
  
  role_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.C2S_LoginCreate.role_name)
}
inline std::string* C2S_LoginCreate::_internal_mutable_role_name() {
  
  return role_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_LoginCreate::release_role_name() {
  // @@protoc_insertion_point(field_release:LoginProtocol.C2S_LoginCreate.role_name)
  
  return role_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_LoginCreate::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  role_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.C2S_LoginCreate.role_name)
}

// string avatarurl = 4;
inline void C2S_LoginCreate::clear_avatarurl() {
  avatarurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_LoginCreate::avatarurl() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.C2S_LoginCreate.avatarurl)
  return _internal_avatarurl();
}
inline void C2S_LoginCreate::set_avatarurl(const std::string& value) {
  _internal_set_avatarurl(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.C2S_LoginCreate.avatarurl)
}
inline std::string* C2S_LoginCreate::mutable_avatarurl() {
  // @@protoc_insertion_point(field_mutable:LoginProtocol.C2S_LoginCreate.avatarurl)
  return _internal_mutable_avatarurl();
}
inline const std::string& C2S_LoginCreate::_internal_avatarurl() const {
  return avatarurl_.GetNoArena();
}
inline void C2S_LoginCreate::_internal_set_avatarurl(const std::string& value) {
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_LoginCreate::set_avatarurl(std::string&& value) {
  
  avatarurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginProtocol.C2S_LoginCreate.avatarurl)
}
inline void C2S_LoginCreate::set_avatarurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.C2S_LoginCreate.avatarurl)
}
inline void C2S_LoginCreate::set_avatarurl(const char* value, size_t size) {
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.C2S_LoginCreate.avatarurl)
}
inline std::string* C2S_LoginCreate::_internal_mutable_avatarurl() {
  
  return avatarurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_LoginCreate::release_avatarurl() {
  // @@protoc_insertion_point(field_release:LoginProtocol.C2S_LoginCreate.avatarurl)
  
  return avatarurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_LoginCreate::set_allocated_avatarurl(std::string* avatarurl) {
  if (avatarurl != nullptr) {
    
  } else {
    
  }
  avatarurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatarurl);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.C2S_LoginCreate.avatarurl)
}

// -------------------------------------------------------------------

// S2C_LoginCreate

// int32 ret = 1;
inline void S2C_LoginCreate::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LoginCreate::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LoginCreate::ret() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.S2C_LoginCreate.ret)
  return _internal_ret();
}
inline void S2C_LoginCreate::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void S2C_LoginCreate::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.S2C_LoginCreate.ret)
}

// int64 role_id = 2;
inline void S2C_LoginCreate::clear_role_id() {
  role_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2C_LoginCreate::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2C_LoginCreate::role_id() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.S2C_LoginCreate.role_id)
  return _internal_role_id();
}
inline void S2C_LoginCreate::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  role_id_ = value;
}
inline void S2C_LoginCreate::set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.S2C_LoginCreate.role_id)
}

// -------------------------------------------------------------------

// C2S_LoginLoad

// int64 role_id = 1;
inline void C2S_LoginLoad::clear_role_id() {
  role_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C2S_LoginLoad::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C2S_LoginLoad::role_id() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.C2S_LoginLoad.role_id)
  return _internal_role_id();
}
inline void C2S_LoginLoad::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  role_id_ = value;
}
inline void C2S_LoginLoad::set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.C2S_LoginLoad.role_id)
}

// int32 gameid = 2;
inline void C2S_LoginLoad::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_LoginLoad::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_LoginLoad::gameid() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.C2S_LoginLoad.gameid)
  return _internal_gameid();
}
inline void C2S_LoginLoad::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void C2S_LoginLoad::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.C2S_LoginLoad.gameid)
}

// string loginname = 3;
inline void C2S_LoginLoad::clear_loginname() {
  loginname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_LoginLoad::loginname() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.C2S_LoginLoad.loginname)
  return _internal_loginname();
}
inline void C2S_LoginLoad::set_loginname(const std::string& value) {
  _internal_set_loginname(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.C2S_LoginLoad.loginname)
}
inline std::string* C2S_LoginLoad::mutable_loginname() {
  // @@protoc_insertion_point(field_mutable:LoginProtocol.C2S_LoginLoad.loginname)
  return _internal_mutable_loginname();
}
inline const std::string& C2S_LoginLoad::_internal_loginname() const {
  return loginname_.GetNoArena();
}
inline void C2S_LoginLoad::_internal_set_loginname(const std::string& value) {
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_LoginLoad::set_loginname(std::string&& value) {
  
  loginname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginProtocol.C2S_LoginLoad.loginname)
}
inline void C2S_LoginLoad::set_loginname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.C2S_LoginLoad.loginname)
}
inline void C2S_LoginLoad::set_loginname(const char* value, size_t size) {
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.C2S_LoginLoad.loginname)
}
inline std::string* C2S_LoginLoad::_internal_mutable_loginname() {
  
  return loginname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_LoginLoad::release_loginname() {
  // @@protoc_insertion_point(field_release:LoginProtocol.C2S_LoginLoad.loginname)
  
  return loginname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_LoginLoad::set_allocated_loginname(std::string* loginname) {
  if (loginname != nullptr) {
    
  } else {
    
  }
  loginname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginname);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.C2S_LoginLoad.loginname)
}

// -------------------------------------------------------------------

// S2C_LoginLoad

// int32 ret = 1;
inline void S2C_LoginLoad::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LoginLoad::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LoginLoad::ret() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.S2C_LoginLoad.ret)
  return _internal_ret();
}
inline void S2C_LoginLoad::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void S2C_LoginLoad::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.S2C_LoginLoad.ret)
}

// int64 role_id = 2;
inline void S2C_LoginLoad::clear_role_id() {
  role_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2C_LoginLoad::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S2C_LoginLoad::role_id() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.S2C_LoginLoad.role_id)
  return _internal_role_id();
}
inline void S2C_LoginLoad::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  role_id_ = value;
}
inline void S2C_LoginLoad::set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.S2C_LoginLoad.role_id)
}

// int32 gameid = 3;
inline void S2C_LoginLoad::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LoginLoad::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LoginLoad::gameid() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.S2C_LoginLoad.gameid)
  return _internal_gameid();
}
inline void S2C_LoginLoad::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void S2C_LoginLoad::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.S2C_LoginLoad.gameid)
}

// string loginname = 4;
inline void S2C_LoginLoad::clear_loginname() {
  loginname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& S2C_LoginLoad::loginname() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.S2C_LoginLoad.loginname)
  return _internal_loginname();
}
inline void S2C_LoginLoad::set_loginname(const std::string& value) {
  _internal_set_loginname(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.S2C_LoginLoad.loginname)
}
inline std::string* S2C_LoginLoad::mutable_loginname() {
  // @@protoc_insertion_point(field_mutable:LoginProtocol.S2C_LoginLoad.loginname)
  return _internal_mutable_loginname();
}
inline const std::string& S2C_LoginLoad::_internal_loginname() const {
  return loginname_.GetNoArena();
}
inline void S2C_LoginLoad::_internal_set_loginname(const std::string& value) {
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void S2C_LoginLoad::set_loginname(std::string&& value) {
  
  loginname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginProtocol.S2C_LoginLoad.loginname)
}
inline void S2C_LoginLoad::set_loginname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.S2C_LoginLoad.loginname)
}
inline void S2C_LoginLoad::set_loginname(const char* value, size_t size) {
  
  loginname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.S2C_LoginLoad.loginname)
}
inline std::string* S2C_LoginLoad::_internal_mutable_loginname() {
  
  return loginname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* S2C_LoginLoad::release_loginname() {
  // @@protoc_insertion_point(field_release:LoginProtocol.S2C_LoginLoad.loginname)
  
  return loginname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void S2C_LoginLoad::set_allocated_loginname(std::string* loginname) {
  if (loginname != nullptr) {
    
  } else {
    
  }
  loginname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginname);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.S2C_LoginLoad.loginname)
}

// -------------------------------------------------------------------

// C2S_LoginOpenid

// int32 gameid = 1;
inline void C2S_LoginOpenid::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_LoginOpenid::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_LoginOpenid::gameid() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.C2S_LoginOpenid.gameid)
  return _internal_gameid();
}
inline void C2S_LoginOpenid::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void C2S_LoginOpenid::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.C2S_LoginOpenid.gameid)
}

// string code = 2;
inline void C2S_LoginOpenid::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_LoginOpenid::code() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.C2S_LoginOpenid.code)
  return _internal_code();
}
inline void C2S_LoginOpenid::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.C2S_LoginOpenid.code)
}
inline std::string* C2S_LoginOpenid::mutable_code() {
  // @@protoc_insertion_point(field_mutable:LoginProtocol.C2S_LoginOpenid.code)
  return _internal_mutable_code();
}
inline const std::string& C2S_LoginOpenid::_internal_code() const {
  return code_.GetNoArena();
}
inline void C2S_LoginOpenid::_internal_set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_LoginOpenid::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginProtocol.C2S_LoginOpenid.code)
}
inline void C2S_LoginOpenid::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.C2S_LoginOpenid.code)
}
inline void C2S_LoginOpenid::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.C2S_LoginOpenid.code)
}
inline std::string* C2S_LoginOpenid::_internal_mutable_code() {
  
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_LoginOpenid::release_code() {
  // @@protoc_insertion_point(field_release:LoginProtocol.C2S_LoginOpenid.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_LoginOpenid::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.C2S_LoginOpenid.code)
}

// -------------------------------------------------------------------

// S2C_LoginOpenid

// int32 ret = 1;
inline void S2C_LoginOpenid::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LoginOpenid::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LoginOpenid::ret() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.S2C_LoginOpenid.ret)
  return _internal_ret();
}
inline void S2C_LoginOpenid::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void S2C_LoginOpenid::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.S2C_LoginOpenid.ret)
}

// string openid = 2;
inline void S2C_LoginOpenid::clear_openid() {
  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& S2C_LoginOpenid::openid() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.S2C_LoginOpenid.openid)
  return _internal_openid();
}
inline void S2C_LoginOpenid::set_openid(const std::string& value) {
  _internal_set_openid(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.S2C_LoginOpenid.openid)
}
inline std::string* S2C_LoginOpenid::mutable_openid() {
  // @@protoc_insertion_point(field_mutable:LoginProtocol.S2C_LoginOpenid.openid)
  return _internal_mutable_openid();
}
inline const std::string& S2C_LoginOpenid::_internal_openid() const {
  return openid_.GetNoArena();
}
inline void S2C_LoginOpenid::_internal_set_openid(const std::string& value) {
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void S2C_LoginOpenid::set_openid(std::string&& value) {
  
  openid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginProtocol.S2C_LoginOpenid.openid)
}
inline void S2C_LoginOpenid::set_openid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.S2C_LoginOpenid.openid)
}
inline void S2C_LoginOpenid::set_openid(const char* value, size_t size) {
  
  openid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.S2C_LoginOpenid.openid)
}
inline std::string* S2C_LoginOpenid::_internal_mutable_openid() {
  
  return openid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* S2C_LoginOpenid::release_openid() {
  // @@protoc_insertion_point(field_release:LoginProtocol.S2C_LoginOpenid.openid)
  
  return openid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void S2C_LoginOpenid::set_allocated_openid(std::string* openid) {
  if (openid != nullptr) {
    
  } else {
    
  }
  openid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.S2C_LoginOpenid.openid)
}

// -------------------------------------------------------------------

// C2S_LoginUpdate

// string role_name = 1;
inline void C2S_LoginUpdate::clear_role_name() {
  role_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_LoginUpdate::role_name() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.C2S_LoginUpdate.role_name)
  return _internal_role_name();
}
inline void C2S_LoginUpdate::set_role_name(const std::string& value) {
  _internal_set_role_name(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.C2S_LoginUpdate.role_name)
}
inline std::string* C2S_LoginUpdate::mutable_role_name() {
  // @@protoc_insertion_point(field_mutable:LoginProtocol.C2S_LoginUpdate.role_name)
  return _internal_mutable_role_name();
}
inline const std::string& C2S_LoginUpdate::_internal_role_name() const {
  return role_name_.GetNoArena();
}
inline void C2S_LoginUpdate::_internal_set_role_name(const std::string& value) {
  
  role_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_LoginUpdate::set_role_name(std::string&& value) {
  
  role_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginProtocol.C2S_LoginUpdate.role_name)
}
inline void C2S_LoginUpdate::set_role_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.C2S_LoginUpdate.role_name)
}
inline void C2S_LoginUpdate::set_role_name(const char* value, size_t size) {
  
  role_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.C2S_LoginUpdate.role_name)
}
inline std::string* C2S_LoginUpdate::_internal_mutable_role_name() {
  
  return role_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_LoginUpdate::release_role_name() {
  // @@protoc_insertion_point(field_release:LoginProtocol.C2S_LoginUpdate.role_name)
  
  return role_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_LoginUpdate::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  role_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.C2S_LoginUpdate.role_name)
}

// string avatarurl = 2;
inline void C2S_LoginUpdate::clear_avatarurl() {
  avatarurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2S_LoginUpdate::avatarurl() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.C2S_LoginUpdate.avatarurl)
  return _internal_avatarurl();
}
inline void C2S_LoginUpdate::set_avatarurl(const std::string& value) {
  _internal_set_avatarurl(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.C2S_LoginUpdate.avatarurl)
}
inline std::string* C2S_LoginUpdate::mutable_avatarurl() {
  // @@protoc_insertion_point(field_mutable:LoginProtocol.C2S_LoginUpdate.avatarurl)
  return _internal_mutable_avatarurl();
}
inline const std::string& C2S_LoginUpdate::_internal_avatarurl() const {
  return avatarurl_.GetNoArena();
}
inline void C2S_LoginUpdate::_internal_set_avatarurl(const std::string& value) {
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2S_LoginUpdate::set_avatarurl(std::string&& value) {
  
  avatarurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginProtocol.C2S_LoginUpdate.avatarurl)
}
inline void C2S_LoginUpdate::set_avatarurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.C2S_LoginUpdate.avatarurl)
}
inline void C2S_LoginUpdate::set_avatarurl(const char* value, size_t size) {
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.C2S_LoginUpdate.avatarurl)
}
inline std::string* C2S_LoginUpdate::_internal_mutable_avatarurl() {
  
  return avatarurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2S_LoginUpdate::release_avatarurl() {
  // @@protoc_insertion_point(field_release:LoginProtocol.C2S_LoginUpdate.avatarurl)
  
  return avatarurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2S_LoginUpdate::set_allocated_avatarurl(std::string* avatarurl) {
  if (avatarurl != nullptr) {
    
  } else {
    
  }
  avatarurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatarurl);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.C2S_LoginUpdate.avatarurl)
}

// -------------------------------------------------------------------

// S2C_LoginUpdate

// int32 ret = 1;
inline void S2C_LoginUpdate::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LoginUpdate::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LoginUpdate::ret() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.S2C_LoginUpdate.ret)
  return _internal_ret();
}
inline void S2C_LoginUpdate::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void S2C_LoginUpdate::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:LoginProtocol.S2C_LoginUpdate.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LoginProtocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_login_2eproto
