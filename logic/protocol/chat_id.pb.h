// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_id.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_5fid_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_5fid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_5fid_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_5fid_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_5fid_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace ChatProtocol {

enum ID : int {
  ZERO = 0,
  LOGIN_ID_BASE = 327680,
  C2S_CHAT_BASE = 328680,
  C2S_CHAT_LOAD = 328681,
  S2C_CHAT_LOAD = 328682,
  C2S_CHAT_CHAT = 328683,
  S2C_CHAT_CHAT = 328684,
  C2S_CHAT_TOP = 329680,
  ID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ID_IsValid(int value);
constexpr ID ID_MIN = ZERO;
constexpr ID ID_MAX = C2S_CHAT_TOP;
constexpr int ID_ARRAYSIZE = ID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ID_descriptor();
template<typename T>
inline const std::string& ID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ID_descriptor(), enum_t_value);
}
inline bool ID_Parse(
    const std::string& name, ID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ID>(
    ID_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ChatProtocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChatProtocol::ID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatProtocol::ID>() {
  return ::ChatProtocol::ID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_5fid_2eproto
