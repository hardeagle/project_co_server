// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatMsg_chat_2eproto;
namespace ChatProtocol {
class ChatMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatMsg> _instance;
} _ChatMsg_default_instance_;
class C2S_ChatLoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_ChatLoad> _instance;
} _C2S_ChatLoad_default_instance_;
class S2C_ChatLoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_ChatLoad> _instance;
} _S2C_ChatLoad_default_instance_;
class C2S_ChatChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_ChatChat> _instance;
} _C2S_ChatChat_default_instance_;
class S2C_ChatChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_ChatChat> _instance;
} _S2C_ChatChat_default_instance_;
}  // namespace ChatProtocol
static void InitDefaultsscc_info_C2S_ChatChat_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatProtocol::_C2S_ChatChat_default_instance_;
    new (ptr) ::ChatProtocol::C2S_ChatChat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatProtocol::C2S_ChatChat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_C2S_ChatChat_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_C2S_ChatChat_chat_2eproto}, {
      &scc_info_ChatMsg_chat_2eproto.base,}};

static void InitDefaultsscc_info_C2S_ChatLoad_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatProtocol::_C2S_ChatLoad_default_instance_;
    new (ptr) ::ChatProtocol::C2S_ChatLoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatProtocol::C2S_ChatLoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_ChatLoad_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_ChatLoad_chat_2eproto}, {}};

static void InitDefaultsscc_info_ChatMsg_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatProtocol::_ChatMsg_default_instance_;
    new (ptr) ::ChatProtocol::ChatMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatProtocol::ChatMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatMsg_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatMsg_chat_2eproto}, {}};

static void InitDefaultsscc_info_S2C_ChatChat_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatProtocol::_S2C_ChatChat_default_instance_;
    new (ptr) ::ChatProtocol::S2C_ChatChat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatProtocol::S2C_ChatChat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_ChatChat_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_ChatChat_chat_2eproto}, {}};

static void InitDefaultsscc_info_S2C_ChatLoad_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatProtocol::_S2C_ChatLoad_default_instance_;
    new (ptr) ::ChatProtocol::S2C_ChatLoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatProtocol::S2C_ChatLoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_S2C_ChatLoad_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_S2C_ChatLoad_chat_2eproto}, {
      &scc_info_ChatMsg_chat_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chat_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_chat_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::ChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::ChatMsg, role_id_),
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::ChatMsg, name_),
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::ChatMsg, avatarurl_),
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::ChatMsg, context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::C2S_ChatLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::C2S_ChatLoad, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::S2C_ChatLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::S2C_ChatLoad, ret_),
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::S2C_ChatLoad, cms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::C2S_ChatChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::C2S_ChatChat, role_id_),
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::C2S_ChatChat, cm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::S2C_ChatChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatProtocol::S2C_ChatChat, ret_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChatProtocol::ChatMsg)},
  { 9, -1, sizeof(::ChatProtocol::C2S_ChatLoad)},
  { 15, -1, sizeof(::ChatProtocol::S2C_ChatLoad)},
  { 22, -1, sizeof(::ChatProtocol::C2S_ChatChat)},
  { 29, -1, sizeof(::ChatProtocol::S2C_ChatChat)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatProtocol::_ChatMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatProtocol::_C2S_ChatLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatProtocol::_S2C_ChatLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatProtocol::_C2S_ChatChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatProtocol::_S2C_ChatChat_default_instance_),
};

const char descriptor_table_protodef_chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nchat.proto\022\014ChatProtocol\"L\n\007ChatMsg\022\017\n"
  "\007role_id\030\001 \001(\003\022\014\n\004name\030\002 \001(\014\022\021\n\tavatarur"
  "l\030\003 \001(\014\022\017\n\007context\030\004 \001(\014\"\037\n\014C2S_ChatLoad"
  "\022\017\n\007role_id\030\001 \001(\003\"\?\n\014S2C_ChatLoad\022\013\n\003ret"
  "\030\001 \001(\005\022\"\n\003cms\030\002 \003(\0132\025.ChatProtocol.ChatM"
  "sg\"B\n\014C2S_ChatChat\022\017\n\007role_id\030\001 \001(\003\022!\n\002c"
  "m\030\002 \001(\0132\025.ChatProtocol.ChatMsg\"\033\n\014S2C_Ch"
  "atChat\022\013\n\003ret\030\001 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chat_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chat_2eproto_sccs[5] = {
  &scc_info_C2S_ChatChat_chat_2eproto.base,
  &scc_info_C2S_ChatLoad_chat_2eproto.base,
  &scc_info_ChatMsg_chat_2eproto.base,
  &scc_info_S2C_ChatChat_chat_2eproto.base,
  &scc_info_S2C_ChatLoad_chat_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chat_2eproto_once;
static bool descriptor_table_chat_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto = {
  &descriptor_table_chat_2eproto_initialized, descriptor_table_protodef_chat_2eproto, "chat.proto", 307,
  &descriptor_table_chat_2eproto_once, descriptor_table_chat_2eproto_sccs, descriptor_table_chat_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_chat_2eproto::offsets,
  file_level_metadata_chat_2eproto, 5, file_level_enum_descriptors_chat_2eproto, file_level_service_descriptors_chat_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chat_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chat_2eproto), true);
namespace ChatProtocol {

// ===================================================================

void ChatMsg::InitAsDefaultInstance() {
}
class ChatMsg::_Internal {
 public:
};

ChatMsg::ChatMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatProtocol.ChatMsg)
}
ChatMsg::ChatMsg(const ChatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  avatarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatarurl().empty()) {
    avatarurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarurl_);
  }
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_context().empty()) {
    context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  role_id_ = from.role_id_;
  // @@protoc_insertion_point(copy_constructor:ChatProtocol.ChatMsg)
}

void ChatMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatMsg_chat_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_id_ = PROTOBUF_LONGLONG(0);
}

ChatMsg::~ChatMsg() {
  // @@protoc_insertion_point(destructor:ChatProtocol.ChatMsg)
  SharedDtor();
}

void ChatMsg::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatMsg& ChatMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatMsg_chat_2eproto.base);
  return *internal_default_instance();
}


void ChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProtocol.ChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ChatMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatarurl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_avatarurl(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_context(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProtocol.ChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->role_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_role_id(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes avatarurl = 3;
  if (this->avatarurl().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_avatarurl(), target);
  }

  // bytes context = 4;
  if (this->context().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_context(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProtocol.ChatMsg)
  return target;
}

size_t ChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProtocol.ChatMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes avatarurl = 3;
  if (this->avatarurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarurl());
  }

  // bytes context = 4;
  if (this->context().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_context());
  }

  // int64 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatProtocol.ChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatProtocol.ChatMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatProtocol.ChatMsg)
    MergeFrom(*source);
  }
}

void ChatMsg::MergeFrom(const ChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatProtocol.ChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.avatarurl().size() > 0) {

    avatarurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarurl_);
  }
  if (from.context().size() > 0) {

    context_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void ChatMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatProtocol.ChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMsg::CopyFrom(const ChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProtocol.ChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsg::IsInitialized() const {
  return true;
}

void ChatMsg::InternalSwap(ChatMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatarurl_.Swap(&other->avatarurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  context_.Swap(&other->context_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(role_id_, other->role_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_ChatLoad::InitAsDefaultInstance() {
}
class C2S_ChatLoad::_Internal {
 public:
};

C2S_ChatLoad::C2S_ChatLoad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatProtocol.C2S_ChatLoad)
}
C2S_ChatLoad::C2S_ChatLoad(const C2S_ChatLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_id_ = from.role_id_;
  // @@protoc_insertion_point(copy_constructor:ChatProtocol.C2S_ChatLoad)
}

void C2S_ChatLoad::SharedCtor() {
  role_id_ = PROTOBUF_LONGLONG(0);
}

C2S_ChatLoad::~C2S_ChatLoad() {
  // @@protoc_insertion_point(destructor:ChatProtocol.C2S_ChatLoad)
  SharedDtor();
}

void C2S_ChatLoad::SharedDtor() {
}

void C2S_ChatLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_ChatLoad& C2S_ChatLoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_ChatLoad_chat_2eproto.base);
  return *internal_default_instance();
}


void C2S_ChatLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProtocol.C2S_ChatLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* C2S_ChatLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_ChatLoad::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProtocol.C2S_ChatLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->role_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProtocol.C2S_ChatLoad)
  return target;
}

size_t C2S_ChatLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProtocol.C2S_ChatLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_ChatLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatProtocol.C2S_ChatLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_ChatLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_ChatLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatProtocol.C2S_ChatLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatProtocol.C2S_ChatLoad)
    MergeFrom(*source);
  }
}

void C2S_ChatLoad::MergeFrom(const C2S_ChatLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatProtocol.C2S_ChatLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void C2S_ChatLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatProtocol.C2S_ChatLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_ChatLoad::CopyFrom(const C2S_ChatLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProtocol.C2S_ChatLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_ChatLoad::IsInitialized() const {
  return true;
}

void C2S_ChatLoad::InternalSwap(C2S_ChatLoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(role_id_, other->role_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_ChatLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_ChatLoad::InitAsDefaultInstance() {
}
class S2C_ChatLoad::_Internal {
 public:
};

S2C_ChatLoad::S2C_ChatLoad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatProtocol.S2C_ChatLoad)
}
S2C_ChatLoad::S2C_ChatLoad(const S2C_ChatLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cms_(from.cms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ChatProtocol.S2C_ChatLoad)
}

void S2C_ChatLoad::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_S2C_ChatLoad_chat_2eproto.base);
  ret_ = 0;
}

S2C_ChatLoad::~S2C_ChatLoad() {
  // @@protoc_insertion_point(destructor:ChatProtocol.S2C_ChatLoad)
  SharedDtor();
}

void S2C_ChatLoad::SharedDtor() {
}

void S2C_ChatLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_ChatLoad& S2C_ChatLoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_ChatLoad_chat_2eproto.base);
  return *internal_default_instance();
}


void S2C_ChatLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProtocol.S2C_ChatLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cms_.Clear();
  ret_ = 0;
  _internal_metadata_.Clear();
}

const char* S2C_ChatLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ChatProtocol.ChatMsg cms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_ChatLoad::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProtocol.S2C_ChatLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // repeated .ChatProtocol.ChatMsg cms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cms_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_cms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProtocol.S2C_ChatLoad)
  return target;
}

size_t S2C_ChatLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProtocol.S2C_ChatLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatProtocol.ChatMsg cms = 2;
  total_size += 1UL * this->_internal_cms_size();
  for (const auto& msg : this->cms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_ChatLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatProtocol.S2C_ChatLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_ChatLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_ChatLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatProtocol.S2C_ChatLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatProtocol.S2C_ChatLoad)
    MergeFrom(*source);
  }
}

void S2C_ChatLoad::MergeFrom(const S2C_ChatLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatProtocol.S2C_ChatLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cms_.MergeFrom(from.cms_);
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void S2C_ChatLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatProtocol.S2C_ChatLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_ChatLoad::CopyFrom(const S2C_ChatLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProtocol.S2C_ChatLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_ChatLoad::IsInitialized() const {
  return true;
}

void S2C_ChatLoad::InternalSwap(S2C_ChatLoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cms_.InternalSwap(&other->cms_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_ChatLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_ChatChat::InitAsDefaultInstance() {
  ::ChatProtocol::_C2S_ChatChat_default_instance_._instance.get_mutable()->cm_ = const_cast< ::ChatProtocol::ChatMsg*>(
      ::ChatProtocol::ChatMsg::internal_default_instance());
}
class C2S_ChatChat::_Internal {
 public:
  static const ::ChatProtocol::ChatMsg& cm(const C2S_ChatChat* msg);
};

const ::ChatProtocol::ChatMsg&
C2S_ChatChat::_Internal::cm(const C2S_ChatChat* msg) {
  return *msg->cm_;
}
C2S_ChatChat::C2S_ChatChat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatProtocol.C2S_ChatChat)
}
C2S_ChatChat::C2S_ChatChat(const C2S_ChatChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_cm()) {
    cm_ = new ::ChatProtocol::ChatMsg(*from.cm_);
  } else {
    cm_ = nullptr;
  }
  role_id_ = from.role_id_;
  // @@protoc_insertion_point(copy_constructor:ChatProtocol.C2S_ChatChat)
}

void C2S_ChatChat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C2S_ChatChat_chat_2eproto.base);
  ::memset(&cm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&cm_)) + sizeof(role_id_));
}

C2S_ChatChat::~C2S_ChatChat() {
  // @@protoc_insertion_point(destructor:ChatProtocol.C2S_ChatChat)
  SharedDtor();
}

void C2S_ChatChat::SharedDtor() {
  if (this != internal_default_instance()) delete cm_;
}

void C2S_ChatChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_ChatChat& C2S_ChatChat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_ChatChat_chat_2eproto.base);
  return *internal_default_instance();
}


void C2S_ChatChat::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProtocol.C2S_ChatChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && cm_ != nullptr) {
    delete cm_;
  }
  cm_ = nullptr;
  role_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* C2S_ChatChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ChatProtocol.ChatMsg cm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_ChatChat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProtocol.C2S_ChatChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->role_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_role_id(), target);
  }

  // .ChatProtocol.ChatMsg cm = 2;
  if (this->has_cm()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::cm(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProtocol.C2S_ChatChat)
  return target;
}

size_t C2S_ChatChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProtocol.C2S_ChatChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatProtocol.ChatMsg cm = 2;
  if (this->has_cm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cm_);
  }

  // int64 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_ChatChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatProtocol.C2S_ChatChat)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_ChatChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_ChatChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatProtocol.C2S_ChatChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatProtocol.C2S_ChatChat)
    MergeFrom(*source);
  }
}

void C2S_ChatChat::MergeFrom(const C2S_ChatChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatProtocol.C2S_ChatChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cm()) {
    _internal_mutable_cm()->::ChatProtocol::ChatMsg::MergeFrom(from._internal_cm());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void C2S_ChatChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatProtocol.C2S_ChatChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_ChatChat::CopyFrom(const C2S_ChatChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProtocol.C2S_ChatChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_ChatChat::IsInitialized() const {
  return true;
}

void C2S_ChatChat::InternalSwap(C2S_ChatChat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cm_, other->cm_);
  swap(role_id_, other->role_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_ChatChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_ChatChat::InitAsDefaultInstance() {
}
class S2C_ChatChat::_Internal {
 public:
};

S2C_ChatChat::S2C_ChatChat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatProtocol.S2C_ChatChat)
}
S2C_ChatChat::S2C_ChatChat(const S2C_ChatChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ChatProtocol.S2C_ChatChat)
}

void S2C_ChatChat::SharedCtor() {
  ret_ = 0;
}

S2C_ChatChat::~S2C_ChatChat() {
  // @@protoc_insertion_point(destructor:ChatProtocol.S2C_ChatChat)
  SharedDtor();
}

void S2C_ChatChat::SharedDtor() {
}

void S2C_ChatChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_ChatChat& S2C_ChatChat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_ChatChat_chat_2eproto.base);
  return *internal_default_instance();
}


void S2C_ChatChat::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatProtocol.S2C_ChatChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

const char* S2C_ChatChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_ChatChat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatProtocol.S2C_ChatChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatProtocol.S2C_ChatChat)
  return target;
}

size_t S2C_ChatChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatProtocol.S2C_ChatChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_ChatChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatProtocol.S2C_ChatChat)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_ChatChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_ChatChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatProtocol.S2C_ChatChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatProtocol.S2C_ChatChat)
    MergeFrom(*source);
  }
}

void S2C_ChatChat::MergeFrom(const S2C_ChatChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatProtocol.S2C_ChatChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void S2C_ChatChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatProtocol.S2C_ChatChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_ChatChat::CopyFrom(const S2C_ChatChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatProtocol.S2C_ChatChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_ChatChat::IsInitialized() const {
  return true;
}

void S2C_ChatChat::InternalSwap(S2C_ChatChat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_ChatChat::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ChatProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChatProtocol::ChatMsg* Arena::CreateMaybeMessage< ::ChatProtocol::ChatMsg >(Arena* arena) {
  return Arena::CreateInternal< ::ChatProtocol::ChatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatProtocol::C2S_ChatLoad* Arena::CreateMaybeMessage< ::ChatProtocol::C2S_ChatLoad >(Arena* arena) {
  return Arena::CreateInternal< ::ChatProtocol::C2S_ChatLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatProtocol::S2C_ChatLoad* Arena::CreateMaybeMessage< ::ChatProtocol::S2C_ChatLoad >(Arena* arena) {
  return Arena::CreateInternal< ::ChatProtocol::S2C_ChatLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatProtocol::C2S_ChatChat* Arena::CreateMaybeMessage< ::ChatProtocol::C2S_ChatChat >(Arena* arena) {
  return Arena::CreateInternal< ::ChatProtocol::C2S_ChatChat >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatProtocol::S2C_ChatChat* Arena::CreateMaybeMessage< ::ChatProtocol::S2C_ChatChat >(Arena* arena) {
  return Arena::CreateInternal< ::ChatProtocol::S2C_ChatChat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
