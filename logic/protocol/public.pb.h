// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_public_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_public_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_public_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_public_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_public_2eproto;
namespace PublicProtocol {
class BaseRoleInfo;
struct BaseRoleInfoDefaultTypeInternal;
extern BaseRoleInfoDefaultTypeInternal _BaseRoleInfo_default_instance_;
}  // namespace PublicProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::PublicProtocol::BaseRoleInfo* Arena::CreateMaybeMessage<::PublicProtocol::BaseRoleInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PublicProtocol {

// ===================================================================

class BaseRoleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublicProtocol.BaseRoleInfo) */ {
 public:
  inline BaseRoleInfo() : BaseRoleInfo(nullptr) {}
  ~BaseRoleInfo() override;
  explicit PROTOBUF_CONSTEXPR BaseRoleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseRoleInfo(const BaseRoleInfo& from);
  BaseRoleInfo(BaseRoleInfo&& from) noexcept
    : BaseRoleInfo() {
    *this = ::std::move(from);
  }

  inline BaseRoleInfo& operator=(const BaseRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseRoleInfo& operator=(BaseRoleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseRoleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseRoleInfo* internal_default_instance() {
    return reinterpret_cast<const BaseRoleInfo*>(
               &_BaseRoleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseRoleInfo& a, BaseRoleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseRoleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseRoleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseRoleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseRoleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseRoleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaseRoleInfo& from) {
    BaseRoleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseRoleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublicProtocol.BaseRoleInfo";
  }
  protected:
  explicit BaseRoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAvatarurlFieldNumber = 3,
    kRoleIdFieldNumber = 1,
    kLogouttsFieldNumber = 5,
    kOnlineFieldNumber = 4,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes avatarurl = 3;
  void clear_avatarurl();
  const std::string& avatarurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatarurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatarurl();
  PROTOBUF_NODISCARD std::string* release_avatarurl();
  void set_allocated_avatarurl(std::string* avatarurl);
  private:
  const std::string& _internal_avatarurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatarurl(const std::string& value);
  std::string* _internal_mutable_avatarurl();
  public:

  // uint64 role_id = 1;
  void clear_role_id();
  uint64_t role_id() const;
  void set_role_id(uint64_t value);
  private:
  uint64_t _internal_role_id() const;
  void _internal_set_role_id(uint64_t value);
  public:

  // uint64 logoutts = 5;
  void clear_logoutts();
  uint64_t logoutts() const;
  void set_logoutts(uint64_t value);
  private:
  uint64_t _internal_logoutts() const;
  void _internal_set_logoutts(uint64_t value);
  public:

  // bool online = 4;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PublicProtocol.BaseRoleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatarurl_;
    uint64_t role_id_;
    uint64_t logoutts_;
    bool online_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_public_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseRoleInfo

// uint64 role_id = 1;
inline void BaseRoleInfo::clear_role_id() {
  _impl_.role_id_ = uint64_t{0u};
}
inline uint64_t BaseRoleInfo::_internal_role_id() const {
  return _impl_.role_id_;
}
inline uint64_t BaseRoleInfo::role_id() const {
  // @@protoc_insertion_point(field_get:PublicProtocol.BaseRoleInfo.role_id)
  return _internal_role_id();
}
inline void BaseRoleInfo::_internal_set_role_id(uint64_t value) {
  
  _impl_.role_id_ = value;
}
inline void BaseRoleInfo::set_role_id(uint64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:PublicProtocol.BaseRoleInfo.role_id)
}

// bytes name = 2;
inline void BaseRoleInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BaseRoleInfo::name() const {
  // @@protoc_insertion_point(field_get:PublicProtocol.BaseRoleInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseRoleInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublicProtocol.BaseRoleInfo.name)
}
inline std::string* BaseRoleInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PublicProtocol.BaseRoleInfo.name)
  return _s;
}
inline const std::string& BaseRoleInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BaseRoleInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BaseRoleInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BaseRoleInfo::release_name() {
  // @@protoc_insertion_point(field_release:PublicProtocol.BaseRoleInfo.name)
  return _impl_.name_.Release();
}
inline void BaseRoleInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublicProtocol.BaseRoleInfo.name)
}

// bytes avatarurl = 3;
inline void BaseRoleInfo::clear_avatarurl() {
  _impl_.avatarurl_.ClearToEmpty();
}
inline const std::string& BaseRoleInfo::avatarurl() const {
  // @@protoc_insertion_point(field_get:PublicProtocol.BaseRoleInfo.avatarurl)
  return _internal_avatarurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BaseRoleInfo::set_avatarurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.avatarurl_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PublicProtocol.BaseRoleInfo.avatarurl)
}
inline std::string* BaseRoleInfo::mutable_avatarurl() {
  std::string* _s = _internal_mutable_avatarurl();
  // @@protoc_insertion_point(field_mutable:PublicProtocol.BaseRoleInfo.avatarurl)
  return _s;
}
inline const std::string& BaseRoleInfo::_internal_avatarurl() const {
  return _impl_.avatarurl_.Get();
}
inline void BaseRoleInfo::_internal_set_avatarurl(const std::string& value) {
  
  _impl_.avatarurl_.Set(value, GetArenaForAllocation());
}
inline std::string* BaseRoleInfo::_internal_mutable_avatarurl() {
  
  return _impl_.avatarurl_.Mutable(GetArenaForAllocation());
}
inline std::string* BaseRoleInfo::release_avatarurl() {
  // @@protoc_insertion_point(field_release:PublicProtocol.BaseRoleInfo.avatarurl)
  return _impl_.avatarurl_.Release();
}
inline void BaseRoleInfo::set_allocated_avatarurl(std::string* avatarurl) {
  if (avatarurl != nullptr) {
    
  } else {
    
  }
  _impl_.avatarurl_.SetAllocated(avatarurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avatarurl_.IsDefault()) {
    _impl_.avatarurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PublicProtocol.BaseRoleInfo.avatarurl)
}

// bool online = 4;
inline void BaseRoleInfo::clear_online() {
  _impl_.online_ = false;
}
inline bool BaseRoleInfo::_internal_online() const {
  return _impl_.online_;
}
inline bool BaseRoleInfo::online() const {
  // @@protoc_insertion_point(field_get:PublicProtocol.BaseRoleInfo.online)
  return _internal_online();
}
inline void BaseRoleInfo::_internal_set_online(bool value) {
  
  _impl_.online_ = value;
}
inline void BaseRoleInfo::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:PublicProtocol.BaseRoleInfo.online)
}

// uint64 logoutts = 5;
inline void BaseRoleInfo::clear_logoutts() {
  _impl_.logoutts_ = uint64_t{0u};
}
inline uint64_t BaseRoleInfo::_internal_logoutts() const {
  return _impl_.logoutts_;
}
inline uint64_t BaseRoleInfo::logoutts() const {
  // @@protoc_insertion_point(field_get:PublicProtocol.BaseRoleInfo.logoutts)
  return _internal_logoutts();
}
inline void BaseRoleInfo::_internal_set_logoutts(uint64_t value) {
  
  _impl_.logoutts_ = value;
}
inline void BaseRoleInfo::set_logoutts(uint64_t value) {
  _internal_set_logoutts(value);
  // @@protoc_insertion_point(field_set:PublicProtocol.BaseRoleInfo.logoutts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace PublicProtocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_public_2eproto
