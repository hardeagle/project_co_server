// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public.proto

#include "public.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace PublicProtocol {
class BaseRoleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseRoleInfo> _instance;
} _BaseRoleInfo_default_instance_;
}  // namespace PublicProtocol
static void InitDefaultsscc_info_BaseRoleInfo_public_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PublicProtocol::_BaseRoleInfo_default_instance_;
    new (ptr) ::PublicProtocol::BaseRoleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PublicProtocol::BaseRoleInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseRoleInfo_public_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BaseRoleInfo_public_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_public_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_public_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_public_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_public_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PublicProtocol::BaseRoleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PublicProtocol::BaseRoleInfo, role_id_),
  PROTOBUF_FIELD_OFFSET(::PublicProtocol::BaseRoleInfo, name_),
  PROTOBUF_FIELD_OFFSET(::PublicProtocol::BaseRoleInfo, avatarurl_),
  PROTOBUF_FIELD_OFFSET(::PublicProtocol::BaseRoleInfo, online_),
  PROTOBUF_FIELD_OFFSET(::PublicProtocol::BaseRoleInfo, logoutts_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PublicProtocol::BaseRoleInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PublicProtocol::_BaseRoleInfo_default_instance_),
};

const char descriptor_table_protodef_public_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014public.proto\022\016PublicProtocol\"b\n\014BaseRo"
  "leInfo\022\017\n\007role_id\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\021\n"
  "\tavatarurl\030\003 \001(\014\022\016\n\006online\030\004 \001(\010\022\020\n\010logo"
  "utts\030\005 \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_public_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_public_2eproto_sccs[1] = {
  &scc_info_BaseRoleInfo_public_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_public_2eproto_once;
static bool descriptor_table_public_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_public_2eproto = {
  &descriptor_table_public_2eproto_initialized, descriptor_table_protodef_public_2eproto, "public.proto", 138,
  &descriptor_table_public_2eproto_once, descriptor_table_public_2eproto_sccs, descriptor_table_public_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_public_2eproto::offsets,
  file_level_metadata_public_2eproto, 1, file_level_enum_descriptors_public_2eproto, file_level_service_descriptors_public_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_public_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_public_2eproto), true);
namespace PublicProtocol {

// ===================================================================

void BaseRoleInfo::InitAsDefaultInstance() {
}
class BaseRoleInfo::_Internal {
 public:
};

BaseRoleInfo::BaseRoleInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublicProtocol.BaseRoleInfo)
}
BaseRoleInfo::BaseRoleInfo(const BaseRoleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  avatarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatarurl().empty()) {
    avatarurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarurl_);
  }
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:PublicProtocol.BaseRoleInfo)
}

void BaseRoleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseRoleInfo_public_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(online_));
}

BaseRoleInfo::~BaseRoleInfo() {
  // @@protoc_insertion_point(destructor:PublicProtocol.BaseRoleInfo)
  SharedDtor();
}

void BaseRoleInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BaseRoleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseRoleInfo& BaseRoleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseRoleInfo_public_2eproto.base);
  return *internal_default_instance();
}


void BaseRoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PublicProtocol.BaseRoleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(online_));
  _internal_metadata_.Clear();
}

const char* BaseRoleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatarurl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_avatarurl(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool online = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 logoutts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          logoutts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseRoleInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublicProtocol.BaseRoleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 role_id = 1;
  if (this->role_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_role_id(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes avatarurl = 3;
  if (this->avatarurl().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_avatarurl(), target);
  }

  // bool online = 4;
  if (this->online() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_online(), target);
  }

  // uint64 logoutts = 5;
  if (this->logoutts() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_logoutts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublicProtocol.BaseRoleInfo)
  return target;
}

size_t BaseRoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublicProtocol.BaseRoleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes avatarurl = 3;
  if (this->avatarurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatarurl());
  }

  // uint64 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  // uint64 logoutts = 5;
  if (this->logoutts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_logoutts());
  }

  // bool online = 4;
  if (this->online() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseRoleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PublicProtocol.BaseRoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseRoleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseRoleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PublicProtocol.BaseRoleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PublicProtocol.BaseRoleInfo)
    MergeFrom(*source);
  }
}

void BaseRoleInfo::MergeFrom(const BaseRoleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublicProtocol.BaseRoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.avatarurl().size() > 0) {

    avatarurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarurl_);
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.logoutts() != 0) {
    _internal_set_logoutts(from._internal_logoutts());
  }
  if (from.online() != 0) {
    _internal_set_online(from._internal_online());
  }
}

void BaseRoleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PublicProtocol.BaseRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseRoleInfo::CopyFrom(const BaseRoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublicProtocol.BaseRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseRoleInfo::IsInitialized() const {
  return true;
}

void BaseRoleInfo::InternalSwap(BaseRoleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatarurl_.Swap(&other->avatarurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(role_id_, other->role_id_);
  swap(logoutts_, other->logoutts_);
  swap(online_, other->online_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseRoleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PublicProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PublicProtocol::BaseRoleInfo* Arena::CreateMaybeMessage< ::PublicProtocol::BaseRoleInfo >(Arena* arena) {
  return Arena::CreateInternal< ::PublicProtocol::BaseRoleInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
