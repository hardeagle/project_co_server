// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#include "login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace LoginProtocol {
class GameInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameInfo> _instance;
} _GameInfo_default_instance_;
class C2S_LoginLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_LoginLogin> _instance;
} _C2S_LoginLogin_default_instance_;
class S2C_LoginLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_LoginLogin> _instance;
} _S2C_LoginLogin_default_instance_;
class C2S_LoginCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_LoginCreate> _instance;
} _C2S_LoginCreate_default_instance_;
class S2C_LoginCreateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_LoginCreate> _instance;
} _S2C_LoginCreate_default_instance_;
class C2S_LoginLoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_LoginLoad> _instance;
} _C2S_LoginLoad_default_instance_;
class S2C_LoginLoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_LoginLoad> _instance;
} _S2C_LoginLoad_default_instance_;
class C2S_LoginOpenidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_LoginOpenid> _instance;
} _C2S_LoginOpenid_default_instance_;
class S2C_LoginOpenidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_LoginOpenid> _instance;
} _S2C_LoginOpenid_default_instance_;
class C2S_LoginUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_LoginUpdate> _instance;
} _C2S_LoginUpdate_default_instance_;
class S2C_LoginUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_LoginUpdate> _instance;
} _S2C_LoginUpdate_default_instance_;
}  // namespace LoginProtocol
static void InitDefaultsscc_info_C2S_LoginCreate_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LoginProtocol::_C2S_LoginCreate_default_instance_;
    new (ptr) ::LoginProtocol::C2S_LoginCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginProtocol::C2S_LoginCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_LoginCreate_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_LoginCreate_login_2eproto}, {}};

static void InitDefaultsscc_info_C2S_LoginLoad_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LoginProtocol::_C2S_LoginLoad_default_instance_;
    new (ptr) ::LoginProtocol::C2S_LoginLoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginProtocol::C2S_LoginLoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_LoginLoad_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_LoginLoad_login_2eproto}, {}};

static void InitDefaultsscc_info_C2S_LoginLogin_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LoginProtocol::_C2S_LoginLogin_default_instance_;
    new (ptr) ::LoginProtocol::C2S_LoginLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginProtocol::C2S_LoginLogin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_LoginLogin_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_LoginLogin_login_2eproto}, {}};

static void InitDefaultsscc_info_C2S_LoginOpenid_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LoginProtocol::_C2S_LoginOpenid_default_instance_;
    new (ptr) ::LoginProtocol::C2S_LoginOpenid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginProtocol::C2S_LoginOpenid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_LoginOpenid_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_LoginOpenid_login_2eproto}, {}};

static void InitDefaultsscc_info_C2S_LoginUpdate_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LoginProtocol::_C2S_LoginUpdate_default_instance_;
    new (ptr) ::LoginProtocol::C2S_LoginUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginProtocol::C2S_LoginUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_LoginUpdate_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_LoginUpdate_login_2eproto}, {}};

static void InitDefaultsscc_info_GameInfo_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LoginProtocol::_GameInfo_default_instance_;
    new (ptr) ::LoginProtocol::GameInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginProtocol::GameInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameInfo_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameInfo_login_2eproto}, {}};

static void InitDefaultsscc_info_S2C_LoginCreate_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LoginProtocol::_S2C_LoginCreate_default_instance_;
    new (ptr) ::LoginProtocol::S2C_LoginCreate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginProtocol::S2C_LoginCreate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_LoginCreate_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_LoginCreate_login_2eproto}, {}};

static void InitDefaultsscc_info_S2C_LoginLoad_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LoginProtocol::_S2C_LoginLoad_default_instance_;
    new (ptr) ::LoginProtocol::S2C_LoginLoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginProtocol::S2C_LoginLoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_LoginLoad_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_LoginLoad_login_2eproto}, {}};

static void InitDefaultsscc_info_S2C_LoginLogin_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LoginProtocol::_S2C_LoginLogin_default_instance_;
    new (ptr) ::LoginProtocol::S2C_LoginLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginProtocol::S2C_LoginLogin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_LoginLogin_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_LoginLogin_login_2eproto}, {}};

static void InitDefaultsscc_info_S2C_LoginOpenid_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LoginProtocol::_S2C_LoginOpenid_default_instance_;
    new (ptr) ::LoginProtocol::S2C_LoginOpenid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginProtocol::S2C_LoginOpenid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_LoginOpenid_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_LoginOpenid_login_2eproto}, {}};

static void InitDefaultsscc_info_S2C_LoginUpdate_login_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LoginProtocol::_S2C_LoginUpdate_default_instance_;
    new (ptr) ::LoginProtocol::S2C_LoginUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginProtocol::S2C_LoginUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_LoginUpdate_login_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_LoginUpdate_login_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_login_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_login_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_login_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_login_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::GameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::GameInfo, gameid_),
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::GameInfo, platform_),
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::GameInfo, name_),
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::GameInfo, appid_),
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::GameInfo, secret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginLogin, loginname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::S2C_LoginLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::S2C_LoginLogin, ret_),
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::S2C_LoginLogin, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginCreate, gameid_),
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginCreate, loginname_),
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginCreate, role_name_),
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginCreate, avatarurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::S2C_LoginCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::S2C_LoginCreate, ret_),
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::S2C_LoginCreate, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginLoad, role_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::S2C_LoginLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::S2C_LoginLoad, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginOpenid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginOpenid, gameid_),
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginOpenid, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::S2C_LoginOpenid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::S2C_LoginOpenid, ret_),
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::S2C_LoginOpenid, openid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginUpdate, role_name_),
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::C2S_LoginUpdate, avatarurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::S2C_LoginUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginProtocol::S2C_LoginUpdate, ret_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LoginProtocol::GameInfo)},
  { 10, -1, sizeof(::LoginProtocol::C2S_LoginLogin)},
  { 16, -1, sizeof(::LoginProtocol::S2C_LoginLogin)},
  { 23, -1, sizeof(::LoginProtocol::C2S_LoginCreate)},
  { 32, -1, sizeof(::LoginProtocol::S2C_LoginCreate)},
  { 39, -1, sizeof(::LoginProtocol::C2S_LoginLoad)},
  { 45, -1, sizeof(::LoginProtocol::S2C_LoginLoad)},
  { 51, -1, sizeof(::LoginProtocol::C2S_LoginOpenid)},
  { 58, -1, sizeof(::LoginProtocol::S2C_LoginOpenid)},
  { 65, -1, sizeof(::LoginProtocol::C2S_LoginUpdate)},
  { 72, -1, sizeof(::LoginProtocol::S2C_LoginUpdate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LoginProtocol::_GameInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LoginProtocol::_C2S_LoginLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LoginProtocol::_S2C_LoginLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LoginProtocol::_C2S_LoginCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LoginProtocol::_S2C_LoginCreate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LoginProtocol::_C2S_LoginLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LoginProtocol::_S2C_LoginLoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LoginProtocol::_C2S_LoginOpenid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LoginProtocol::_S2C_LoginOpenid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LoginProtocol::_C2S_LoginUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LoginProtocol::_S2C_LoginUpdate_default_instance_),
};

const char descriptor_table_protodef_login_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013login.proto\022\rLoginProtocol\"Y\n\010GameInfo"
  "\022\016\n\006gameid\030\001 \001(\005\022\020\n\010platform\030\002 \001(\005\022\014\n\004na"
  "me\030\003 \001(\t\022\r\n\005appid\030\004 \001(\t\022\016\n\006secret\030\005 \001(\t\""
  "#\n\016C2S_LoginLogin\022\021\n\tloginname\030\001 \001(\t\".\n\016"
  "S2C_LoginLogin\022\013\n\003ret\030\001 \001(\005\022\017\n\007role_id\030\002"
  " \001(\003\"Z\n\017C2S_LoginCreate\022\016\n\006gameid\030\001 \001(\005\022"
  "\021\n\tloginname\030\002 \001(\t\022\021\n\trole_name\030\003 \001(\t\022\021\n"
  "\tavatarurl\030\004 \001(\t\"/\n\017S2C_LoginCreate\022\013\n\003r"
  "et\030\001 \001(\005\022\017\n\007role_id\030\002 \001(\003\" \n\rC2S_LoginLo"
  "ad\022\017\n\007role_id\030\001 \001(\003\"\034\n\rS2C_LoginLoad\022\013\n\003"
  "ret\030\001 \001(\005\"/\n\017C2S_LoginOpenid\022\016\n\006gameid\030\001"
  " \001(\005\022\014\n\004code\030\002 \001(\t\".\n\017S2C_LoginOpenid\022\013\n"
  "\003ret\030\001 \001(\005\022\016\n\006openid\030\002 \001(\t\"7\n\017C2S_LoginU"
  "pdate\022\021\n\trole_name\030\001 \001(\t\022\021\n\tavatarurl\030\002 "
  "\001(\t\"\036\n\017S2C_LoginUpdate\022\013\n\003ret\030\001 \001(\005b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_login_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_login_2eproto_sccs[11] = {
  &scc_info_C2S_LoginCreate_login_2eproto.base,
  &scc_info_C2S_LoginLoad_login_2eproto.base,
  &scc_info_C2S_LoginLogin_login_2eproto.base,
  &scc_info_C2S_LoginOpenid_login_2eproto.base,
  &scc_info_C2S_LoginUpdate_login_2eproto.base,
  &scc_info_GameInfo_login_2eproto.base,
  &scc_info_S2C_LoginCreate_login_2eproto.base,
  &scc_info_S2C_LoginLoad_login_2eproto.base,
  &scc_info_S2C_LoginLogin_login_2eproto.base,
  &scc_info_S2C_LoginOpenid_login_2eproto.base,
  &scc_info_S2C_LoginUpdate_login_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_login_2eproto_once;
static bool descriptor_table_login_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_2eproto = {
  &descriptor_table_login_2eproto_initialized, descriptor_table_protodef_login_2eproto, "login.proto", 603,
  &descriptor_table_login_2eproto_once, descriptor_table_login_2eproto_sccs, descriptor_table_login_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_login_2eproto::offsets,
  file_level_metadata_login_2eproto, 11, file_level_enum_descriptors_login_2eproto, file_level_service_descriptors_login_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_login_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_login_2eproto), true);
namespace LoginProtocol {

// ===================================================================

void GameInfo::InitAsDefaultInstance() {
}
class GameInfo::_Internal {
 public:
};

GameInfo::GameInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.GameInfo)
}
GameInfo::GameInfo(const GameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  appid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appid().empty()) {
    appid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&platform_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(platform_));
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.GameInfo)
}

void GameInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameInfo_login_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&platform_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(platform_));
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:LoginProtocol.GameInfo)
  SharedDtor();
}

void GameInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameInfo& GameInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameInfo_login_2eproto.base);
  return *internal_default_instance();
}


void GameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginProtocol.GameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&platform_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(platform_));
  _internal_metadata_.Clear();
}

const char* GameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 platform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          platform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "LoginProtocol.GameInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_appid(), ptr, ctx, "LoginProtocol.GameInfo.appid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string secret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_secret(), ptr, ctx, "LoginProtocol.GameInfo.secret");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.GameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameid = 1;
  if (this->gameid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameid(), target);
  }

  // int32 platform = 2;
  if (this->platform() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_platform(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginProtocol.GameInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string appid = 4;
  if (this->appid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appid().data(), static_cast<int>(this->_internal_appid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginProtocol.GameInfo.appid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_appid(), target);
  }

  // string secret = 5;
  if (this->secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginProtocol.GameInfo.secret");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.GameInfo)
  return target;
}

size_t GameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginProtocol.GameInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string appid = 4;
  if (this->appid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appid());
  }

  // string secret = 5;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // int32 gameid = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  // int32 platform = 2;
  if (this->platform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_platform());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginProtocol.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginProtocol.GameInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginProtocol.GameInfo)
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginProtocol.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.appid().size() > 0) {

    appid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.appid_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
  if (from.platform() != 0) {
    _internal_set_platform(from._internal_platform());
  }
}

void GameInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginProtocol.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginProtocol.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  return true;
}

void GameInfo::InternalSwap(GameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  appid_.Swap(&other->appid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
  swap(platform_, other->platform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_LoginLogin::InitAsDefaultInstance() {
}
class C2S_LoginLogin::_Internal {
 public:
};

C2S_LoginLogin::C2S_LoginLogin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.C2S_LoginLogin)
}
C2S_LoginLogin::C2S_LoginLogin(const C2S_LoginLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loginname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loginname().empty()) {
    loginname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.loginname_);
  }
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.C2S_LoginLogin)
}

void C2S_LoginLogin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C2S_LoginLogin_login_2eproto.base);
  loginname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

C2S_LoginLogin::~C2S_LoginLogin() {
  // @@protoc_insertion_point(destructor:LoginProtocol.C2S_LoginLogin)
  SharedDtor();
}

void C2S_LoginLogin::SharedDtor() {
  loginname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2S_LoginLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_LoginLogin& C2S_LoginLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_LoginLogin_login_2eproto.base);
  return *internal_default_instance();
}


void C2S_LoginLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginProtocol.C2S_LoginLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loginname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* C2S_LoginLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string loginname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_loginname(), ptr, ctx, "LoginProtocol.C2S_LoginLogin.loginname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_LoginLogin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.C2S_LoginLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string loginname = 1;
  if (this->loginname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loginname().data(), static_cast<int>(this->_internal_loginname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginProtocol.C2S_LoginLogin.loginname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loginname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.C2S_LoginLogin)
  return target;
}

size_t C2S_LoginLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginProtocol.C2S_LoginLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loginname = 1;
  if (this->loginname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loginname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_LoginLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginProtocol.C2S_LoginLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_LoginLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_LoginLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginProtocol.C2S_LoginLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginProtocol.C2S_LoginLogin)
    MergeFrom(*source);
  }
}

void C2S_LoginLogin::MergeFrom(const C2S_LoginLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginProtocol.C2S_LoginLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loginname().size() > 0) {

    loginname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.loginname_);
  }
}

void C2S_LoginLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginProtocol.C2S_LoginLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_LoginLogin::CopyFrom(const C2S_LoginLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginProtocol.C2S_LoginLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_LoginLogin::IsInitialized() const {
  return true;
}

void C2S_LoginLogin::InternalSwap(C2S_LoginLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  loginname_.Swap(&other->loginname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_LoginLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_LoginLogin::InitAsDefaultInstance() {
}
class S2C_LoginLogin::_Internal {
 public:
};

S2C_LoginLogin::S2C_LoginLogin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.S2C_LoginLogin)
}
S2C_LoginLogin::S2C_LoginLogin(const S2C_LoginLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.S2C_LoginLogin)
}

void S2C_LoginLogin::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
}

S2C_LoginLogin::~S2C_LoginLogin() {
  // @@protoc_insertion_point(destructor:LoginProtocol.S2C_LoginLogin)
  SharedDtor();
}

void S2C_LoginLogin::SharedDtor() {
}

void S2C_LoginLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_LoginLogin& S2C_LoginLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_LoginLogin_login_2eproto.base);
  return *internal_default_instance();
}


void S2C_LoginLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginProtocol.S2C_LoginLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
  _internal_metadata_.Clear();
}

const char* S2C_LoginLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_LoginLogin::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.S2C_LoginLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.S2C_LoginLogin)
  return target;
}

size_t S2C_LoginLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginProtocol.S2C_LoginLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_role_id());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_LoginLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginProtocol.S2C_LoginLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_LoginLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_LoginLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginProtocol.S2C_LoginLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginProtocol.S2C_LoginLogin)
    MergeFrom(*source);
  }
}

void S2C_LoginLogin::MergeFrom(const S2C_LoginLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginProtocol.S2C_LoginLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void S2C_LoginLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginProtocol.S2C_LoginLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_LoginLogin::CopyFrom(const S2C_LoginLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginProtocol.S2C_LoginLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_LoginLogin::IsInitialized() const {
  return true;
}

void S2C_LoginLogin::InternalSwap(S2C_LoginLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(role_id_, other->role_id_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_LoginLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_LoginCreate::InitAsDefaultInstance() {
}
class C2S_LoginCreate::_Internal {
 public:
};

C2S_LoginCreate::C2S_LoginCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.C2S_LoginCreate)
}
C2S_LoginCreate::C2S_LoginCreate(const C2S_LoginCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loginname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loginname().empty()) {
    loginname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.loginname_);
  }
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role_name().empty()) {
    role_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  avatarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatarurl().empty()) {
    avatarurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarurl_);
  }
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.C2S_LoginCreate)
}

void C2S_LoginCreate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C2S_LoginCreate_login_2eproto.base);
  loginname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0;
}

C2S_LoginCreate::~C2S_LoginCreate() {
  // @@protoc_insertion_point(destructor:LoginProtocol.C2S_LoginCreate)
  SharedDtor();
}

void C2S_LoginCreate::SharedDtor() {
  loginname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2S_LoginCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_LoginCreate& C2S_LoginCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_LoginCreate_login_2eproto.base);
  return *internal_default_instance();
}


void C2S_LoginCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginProtocol.C2S_LoginCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loginname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0;
  _internal_metadata_.Clear();
}

const char* C2S_LoginCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string loginname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_loginname(), ptr, ctx, "LoginProtocol.C2S_LoginCreate.loginname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_role_name(), ptr, ctx, "LoginProtocol.C2S_LoginCreate.role_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatarurl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_avatarurl(), ptr, ctx, "LoginProtocol.C2S_LoginCreate.avatarurl");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_LoginCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.C2S_LoginCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameid = 1;
  if (this->gameid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameid(), target);
  }

  // string loginname = 2;
  if (this->loginname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loginname().data(), static_cast<int>(this->_internal_loginname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginProtocol.C2S_LoginCreate.loginname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_loginname(), target);
  }

  // string role_name = 3;
  if (this->role_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginProtocol.C2S_LoginCreate.role_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_role_name(), target);
  }

  // string avatarurl = 4;
  if (this->avatarurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatarurl().data(), static_cast<int>(this->_internal_avatarurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginProtocol.C2S_LoginCreate.avatarurl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avatarurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.C2S_LoginCreate)
  return target;
}

size_t C2S_LoginCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginProtocol.C2S_LoginCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loginname = 2;
  if (this->loginname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loginname());
  }

  // string role_name = 3;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // string avatarurl = 4;
  if (this->avatarurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatarurl());
  }

  // int32 gameid = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_LoginCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginProtocol.C2S_LoginCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_LoginCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_LoginCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginProtocol.C2S_LoginCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginProtocol.C2S_LoginCreate)
    MergeFrom(*source);
  }
}

void C2S_LoginCreate::MergeFrom(const C2S_LoginCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginProtocol.C2S_LoginCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loginname().size() > 0) {

    loginname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.loginname_);
  }
  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.avatarurl().size() > 0) {

    avatarurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarurl_);
  }
  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void C2S_LoginCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginProtocol.C2S_LoginCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_LoginCreate::CopyFrom(const C2S_LoginCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginProtocol.C2S_LoginCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_LoginCreate::IsInitialized() const {
  return true;
}

void C2S_LoginCreate::InternalSwap(C2S_LoginCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  loginname_.Swap(&other->loginname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  role_name_.Swap(&other->role_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatarurl_.Swap(&other->avatarurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_LoginCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_LoginCreate::InitAsDefaultInstance() {
}
class S2C_LoginCreate::_Internal {
 public:
};

S2C_LoginCreate::S2C_LoginCreate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.S2C_LoginCreate)
}
S2C_LoginCreate::S2C_LoginCreate(const S2C_LoginCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&role_id_, &from.role_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.S2C_LoginCreate)
}

void S2C_LoginCreate::SharedCtor() {
  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
}

S2C_LoginCreate::~S2C_LoginCreate() {
  // @@protoc_insertion_point(destructor:LoginProtocol.S2C_LoginCreate)
  SharedDtor();
}

void S2C_LoginCreate::SharedDtor() {
}

void S2C_LoginCreate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_LoginCreate& S2C_LoginCreate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_LoginCreate_login_2eproto.base);
  return *internal_default_instance();
}


void S2C_LoginCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginProtocol.S2C_LoginCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&role_id_)) + sizeof(ret_));
  _internal_metadata_.Clear();
}

const char* S2C_LoginCreate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_LoginCreate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.S2C_LoginCreate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.S2C_LoginCreate)
  return target;
}

size_t S2C_LoginCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginProtocol.S2C_LoginCreate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_role_id());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_LoginCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginProtocol.S2C_LoginCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_LoginCreate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_LoginCreate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginProtocol.S2C_LoginCreate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginProtocol.S2C_LoginCreate)
    MergeFrom(*source);
  }
}

void S2C_LoginCreate::MergeFrom(const S2C_LoginCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginProtocol.S2C_LoginCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void S2C_LoginCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginProtocol.S2C_LoginCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_LoginCreate::CopyFrom(const S2C_LoginCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginProtocol.S2C_LoginCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_LoginCreate::IsInitialized() const {
  return true;
}

void S2C_LoginCreate::InternalSwap(S2C_LoginCreate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(role_id_, other->role_id_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_LoginCreate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_LoginLoad::InitAsDefaultInstance() {
}
class C2S_LoginLoad::_Internal {
 public:
};

C2S_LoginLoad::C2S_LoginLoad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.C2S_LoginLoad)
}
C2S_LoginLoad::C2S_LoginLoad(const C2S_LoginLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_id_ = from.role_id_;
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.C2S_LoginLoad)
}

void C2S_LoginLoad::SharedCtor() {
  role_id_ = PROTOBUF_LONGLONG(0);
}

C2S_LoginLoad::~C2S_LoginLoad() {
  // @@protoc_insertion_point(destructor:LoginProtocol.C2S_LoginLoad)
  SharedDtor();
}

void C2S_LoginLoad::SharedDtor() {
}

void C2S_LoginLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_LoginLoad& C2S_LoginLoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_LoginLoad_login_2eproto.base);
  return *internal_default_instance();
}


void C2S_LoginLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginProtocol.C2S_LoginLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* C2S_LoginLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 role_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_LoginLoad::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.C2S_LoginLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->role_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_role_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.C2S_LoginLoad)
  return target;
}

size_t C2S_LoginLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginProtocol.C2S_LoginLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 role_id = 1;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_LoginLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginProtocol.C2S_LoginLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_LoginLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_LoginLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginProtocol.C2S_LoginLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginProtocol.C2S_LoginLoad)
    MergeFrom(*source);
  }
}

void C2S_LoginLoad::MergeFrom(const C2S_LoginLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginProtocol.C2S_LoginLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void C2S_LoginLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginProtocol.C2S_LoginLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_LoginLoad::CopyFrom(const C2S_LoginLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginProtocol.C2S_LoginLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_LoginLoad::IsInitialized() const {
  return true;
}

void C2S_LoginLoad::InternalSwap(C2S_LoginLoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(role_id_, other->role_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_LoginLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_LoginLoad::InitAsDefaultInstance() {
}
class S2C_LoginLoad::_Internal {
 public:
};

S2C_LoginLoad::S2C_LoginLoad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.S2C_LoginLoad)
}
S2C_LoginLoad::S2C_LoginLoad(const S2C_LoginLoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.S2C_LoginLoad)
}

void S2C_LoginLoad::SharedCtor() {
  ret_ = 0;
}

S2C_LoginLoad::~S2C_LoginLoad() {
  // @@protoc_insertion_point(destructor:LoginProtocol.S2C_LoginLoad)
  SharedDtor();
}

void S2C_LoginLoad::SharedDtor() {
}

void S2C_LoginLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_LoginLoad& S2C_LoginLoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_LoginLoad_login_2eproto.base);
  return *internal_default_instance();
}


void S2C_LoginLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginProtocol.S2C_LoginLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

const char* S2C_LoginLoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_LoginLoad::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.S2C_LoginLoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.S2C_LoginLoad)
  return target;
}

size_t S2C_LoginLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginProtocol.S2C_LoginLoad)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_LoginLoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginProtocol.S2C_LoginLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_LoginLoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_LoginLoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginProtocol.S2C_LoginLoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginProtocol.S2C_LoginLoad)
    MergeFrom(*source);
  }
}

void S2C_LoginLoad::MergeFrom(const S2C_LoginLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginProtocol.S2C_LoginLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void S2C_LoginLoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginProtocol.S2C_LoginLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_LoginLoad::CopyFrom(const S2C_LoginLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginProtocol.S2C_LoginLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_LoginLoad::IsInitialized() const {
  return true;
}

void S2C_LoginLoad::InternalSwap(S2C_LoginLoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_LoginLoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_LoginOpenid::InitAsDefaultInstance() {
}
class C2S_LoginOpenid::_Internal {
 public:
};

C2S_LoginOpenid::C2S_LoginOpenid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.C2S_LoginOpenid)
}
C2S_LoginOpenid::C2S_LoginOpenid(const C2S_LoginOpenid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.C2S_LoginOpenid)
}

void C2S_LoginOpenid::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C2S_LoginOpenid_login_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0;
}

C2S_LoginOpenid::~C2S_LoginOpenid() {
  // @@protoc_insertion_point(destructor:LoginProtocol.C2S_LoginOpenid)
  SharedDtor();
}

void C2S_LoginOpenid::SharedDtor() {
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2S_LoginOpenid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_LoginOpenid& C2S_LoginOpenid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_LoginOpenid_login_2eproto.base);
  return *internal_default_instance();
}


void C2S_LoginOpenid::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginProtocol.C2S_LoginOpenid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gameid_ = 0;
  _internal_metadata_.Clear();
}

const char* C2S_LoginOpenid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_code(), ptr, ctx, "LoginProtocol.C2S_LoginOpenid.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_LoginOpenid::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.C2S_LoginOpenid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameid = 1;
  if (this->gameid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameid(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginProtocol.C2S_LoginOpenid.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.C2S_LoginOpenid)
  return target;
}

size_t C2S_LoginOpenid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginProtocol.C2S_LoginOpenid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // int32 gameid = 1;
  if (this->gameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_LoginOpenid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginProtocol.C2S_LoginOpenid)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_LoginOpenid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_LoginOpenid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginProtocol.C2S_LoginOpenid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginProtocol.C2S_LoginOpenid)
    MergeFrom(*source);
  }
}

void C2S_LoginOpenid::MergeFrom(const C2S_LoginOpenid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginProtocol.C2S_LoginOpenid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
}

void C2S_LoginOpenid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginProtocol.C2S_LoginOpenid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_LoginOpenid::CopyFrom(const C2S_LoginOpenid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginProtocol.C2S_LoginOpenid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_LoginOpenid::IsInitialized() const {
  return true;
}

void C2S_LoginOpenid::InternalSwap(C2S_LoginOpenid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_LoginOpenid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_LoginOpenid::InitAsDefaultInstance() {
}
class S2C_LoginOpenid::_Internal {
 public:
};

S2C_LoginOpenid::S2C_LoginOpenid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.S2C_LoginOpenid)
}
S2C_LoginOpenid::S2C_LoginOpenid(const S2C_LoginOpenid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_openid().empty()) {
    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.S2C_LoginOpenid)
}

void S2C_LoginOpenid::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_S2C_LoginOpenid_login_2eproto.base);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
}

S2C_LoginOpenid::~S2C_LoginOpenid() {
  // @@protoc_insertion_point(destructor:LoginProtocol.S2C_LoginOpenid)
  SharedDtor();
}

void S2C_LoginOpenid::SharedDtor() {
  openid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S2C_LoginOpenid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_LoginOpenid& S2C_LoginOpenid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_LoginOpenid_login_2eproto.base);
  return *internal_default_instance();
}


void S2C_LoginOpenid::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginProtocol.S2C_LoginOpenid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  openid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
  _internal_metadata_.Clear();
}

const char* S2C_LoginOpenid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string openid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_openid(), ptr, ctx, "LoginProtocol.S2C_LoginOpenid.openid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_LoginOpenid::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.S2C_LoginOpenid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // string openid = 2;
  if (this->openid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginProtocol.S2C_LoginOpenid.openid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_openid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.S2C_LoginOpenid)
  return target;
}

size_t S2C_LoginOpenid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginProtocol.S2C_LoginOpenid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string openid = 2;
  if (this->openid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_openid());
  }

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_LoginOpenid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginProtocol.S2C_LoginOpenid)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_LoginOpenid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_LoginOpenid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginProtocol.S2C_LoginOpenid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginProtocol.S2C_LoginOpenid)
    MergeFrom(*source);
  }
}

void S2C_LoginOpenid::MergeFrom(const S2C_LoginOpenid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginProtocol.S2C_LoginOpenid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.openid().size() > 0) {

    openid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.openid_);
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void S2C_LoginOpenid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginProtocol.S2C_LoginOpenid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_LoginOpenid::CopyFrom(const S2C_LoginOpenid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginProtocol.S2C_LoginOpenid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_LoginOpenid::IsInitialized() const {
  return true;
}

void S2C_LoginOpenid::InternalSwap(S2C_LoginOpenid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  openid_.Swap(&other->openid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_LoginOpenid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_LoginUpdate::InitAsDefaultInstance() {
}
class C2S_LoginUpdate::_Internal {
 public:
};

C2S_LoginUpdate::C2S_LoginUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.C2S_LoginUpdate)
}
C2S_LoginUpdate::C2S_LoginUpdate(const C2S_LoginUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role_name().empty()) {
    role_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  avatarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatarurl().empty()) {
    avatarurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarurl_);
  }
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.C2S_LoginUpdate)
}

void C2S_LoginUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C2S_LoginUpdate_login_2eproto.base);
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

C2S_LoginUpdate::~C2S_LoginUpdate() {
  // @@protoc_insertion_point(destructor:LoginProtocol.C2S_LoginUpdate)
  SharedDtor();
}

void C2S_LoginUpdate::SharedDtor() {
  role_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2S_LoginUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_LoginUpdate& C2S_LoginUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_LoginUpdate_login_2eproto.base);
  return *internal_default_instance();
}


void C2S_LoginUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginProtocol.C2S_LoginUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatarurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* C2S_LoginUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string role_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_role_name(), ptr, ctx, "LoginProtocol.C2S_LoginUpdate.role_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatarurl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_avatarurl(), ptr, ctx, "LoginProtocol.C2S_LoginUpdate.avatarurl");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_LoginUpdate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.C2S_LoginUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string role_name = 1;
  if (this->role_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginProtocol.C2S_LoginUpdate.role_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role_name(), target);
  }

  // string avatarurl = 2;
  if (this->avatarurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatarurl().data(), static_cast<int>(this->_internal_avatarurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginProtocol.C2S_LoginUpdate.avatarurl");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_avatarurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.C2S_LoginUpdate)
  return target;
}

size_t C2S_LoginUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginProtocol.C2S_LoginUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role_name = 1;
  if (this->role_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // string avatarurl = 2;
  if (this->avatarurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatarurl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_LoginUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginProtocol.C2S_LoginUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_LoginUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_LoginUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginProtocol.C2S_LoginUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginProtocol.C2S_LoginUpdate)
    MergeFrom(*source);
  }
}

void C2S_LoginUpdate::MergeFrom(const C2S_LoginUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginProtocol.C2S_LoginUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role_name().size() > 0) {

    role_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_name_);
  }
  if (from.avatarurl().size() > 0) {

    avatarurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarurl_);
  }
}

void C2S_LoginUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginProtocol.C2S_LoginUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_LoginUpdate::CopyFrom(const C2S_LoginUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginProtocol.C2S_LoginUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_LoginUpdate::IsInitialized() const {
  return true;
}

void C2S_LoginUpdate::InternalSwap(C2S_LoginUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  role_name_.Swap(&other->role_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatarurl_.Swap(&other->avatarurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_LoginUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_LoginUpdate::InitAsDefaultInstance() {
}
class S2C_LoginUpdate::_Internal {
 public:
};

S2C_LoginUpdate::S2C_LoginUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.S2C_LoginUpdate)
}
S2C_LoginUpdate::S2C_LoginUpdate(const S2C_LoginUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.S2C_LoginUpdate)
}

void S2C_LoginUpdate::SharedCtor() {
  ret_ = 0;
}

S2C_LoginUpdate::~S2C_LoginUpdate() {
  // @@protoc_insertion_point(destructor:LoginProtocol.S2C_LoginUpdate)
  SharedDtor();
}

void S2C_LoginUpdate::SharedDtor() {
}

void S2C_LoginUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_LoginUpdate& S2C_LoginUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_LoginUpdate_login_2eproto.base);
  return *internal_default_instance();
}


void S2C_LoginUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginProtocol.S2C_LoginUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

const char* S2C_LoginUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_LoginUpdate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.S2C_LoginUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.S2C_LoginUpdate)
  return target;
}

size_t S2C_LoginUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginProtocol.S2C_LoginUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_LoginUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginProtocol.S2C_LoginUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_LoginUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_LoginUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginProtocol.S2C_LoginUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginProtocol.S2C_LoginUpdate)
    MergeFrom(*source);
  }
}

void S2C_LoginUpdate::MergeFrom(const S2C_LoginUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginProtocol.S2C_LoginUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void S2C_LoginUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginProtocol.S2C_LoginUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_LoginUpdate::CopyFrom(const S2C_LoginUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginProtocol.S2C_LoginUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_LoginUpdate::IsInitialized() const {
  return true;
}

void S2C_LoginUpdate::InternalSwap(S2C_LoginUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_LoginUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace LoginProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LoginProtocol::GameInfo* Arena::CreateMaybeMessage< ::LoginProtocol::GameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::LoginProtocol::GameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginProtocol::C2S_LoginLogin* Arena::CreateMaybeMessage< ::LoginProtocol::C2S_LoginLogin >(Arena* arena) {
  return Arena::CreateInternal< ::LoginProtocol::C2S_LoginLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginProtocol::S2C_LoginLogin* Arena::CreateMaybeMessage< ::LoginProtocol::S2C_LoginLogin >(Arena* arena) {
  return Arena::CreateInternal< ::LoginProtocol::S2C_LoginLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginProtocol::C2S_LoginCreate* Arena::CreateMaybeMessage< ::LoginProtocol::C2S_LoginCreate >(Arena* arena) {
  return Arena::CreateInternal< ::LoginProtocol::C2S_LoginCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginProtocol::S2C_LoginCreate* Arena::CreateMaybeMessage< ::LoginProtocol::S2C_LoginCreate >(Arena* arena) {
  return Arena::CreateInternal< ::LoginProtocol::S2C_LoginCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginProtocol::C2S_LoginLoad* Arena::CreateMaybeMessage< ::LoginProtocol::C2S_LoginLoad >(Arena* arena) {
  return Arena::CreateInternal< ::LoginProtocol::C2S_LoginLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginProtocol::S2C_LoginLoad* Arena::CreateMaybeMessage< ::LoginProtocol::S2C_LoginLoad >(Arena* arena) {
  return Arena::CreateInternal< ::LoginProtocol::S2C_LoginLoad >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginProtocol::C2S_LoginOpenid* Arena::CreateMaybeMessage< ::LoginProtocol::C2S_LoginOpenid >(Arena* arena) {
  return Arena::CreateInternal< ::LoginProtocol::C2S_LoginOpenid >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginProtocol::S2C_LoginOpenid* Arena::CreateMaybeMessage< ::LoginProtocol::S2C_LoginOpenid >(Arena* arena) {
  return Arena::CreateInternal< ::LoginProtocol::S2C_LoginOpenid >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginProtocol::C2S_LoginUpdate* Arena::CreateMaybeMessage< ::LoginProtocol::C2S_LoginUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::LoginProtocol::C2S_LoginUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginProtocol::S2C_LoginUpdate* Arena::CreateMaybeMessage< ::LoginProtocol::S2C_LoginUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::LoginProtocol::S2C_LoginUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
