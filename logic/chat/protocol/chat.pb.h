// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto;
namespace ChatProtocol {
class C2S_ChatChat;
class C2S_ChatChatDefaultTypeInternal;
extern C2S_ChatChatDefaultTypeInternal _C2S_ChatChat_default_instance_;
class C2S_ChatLoad;
class C2S_ChatLoadDefaultTypeInternal;
extern C2S_ChatLoadDefaultTypeInternal _C2S_ChatLoad_default_instance_;
class ChatMsg;
class ChatMsgDefaultTypeInternal;
extern ChatMsgDefaultTypeInternal _ChatMsg_default_instance_;
class S2C_ChatChat;
class S2C_ChatChatDefaultTypeInternal;
extern S2C_ChatChatDefaultTypeInternal _S2C_ChatChat_default_instance_;
class S2C_ChatLoad;
class S2C_ChatLoadDefaultTypeInternal;
extern S2C_ChatLoadDefaultTypeInternal _S2C_ChatLoad_default_instance_;
}  // namespace ChatProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatProtocol::C2S_ChatChat* Arena::CreateMaybeMessage<::ChatProtocol::C2S_ChatChat>(Arena*);
template<> ::ChatProtocol::C2S_ChatLoad* Arena::CreateMaybeMessage<::ChatProtocol::C2S_ChatLoad>(Arena*);
template<> ::ChatProtocol::ChatMsg* Arena::CreateMaybeMessage<::ChatProtocol::ChatMsg>(Arena*);
template<> ::ChatProtocol::S2C_ChatChat* Arena::CreateMaybeMessage<::ChatProtocol::S2C_ChatChat>(Arena*);
template<> ::ChatProtocol::S2C_ChatLoad* Arena::CreateMaybeMessage<::ChatProtocol::S2C_ChatLoad>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChatProtocol {

// ===================================================================

class ChatMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatProtocol.ChatMsg) */ {
 public:
  ChatMsg();
  virtual ~ChatMsg();

  ChatMsg(const ChatMsg& from);
  ChatMsg(ChatMsg&& from) noexcept
    : ChatMsg() {
    *this = ::std::move(from);
  }

  inline ChatMsg& operator=(const ChatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMsg& operator=(ChatMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMsg* internal_default_instance() {
    return reinterpret_cast<const ChatMsg*>(
               &_ChatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatMsg& a, ChatMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMsg* New() const final {
    return CreateMaybeMessage<ChatMsg>(nullptr);
  }

  ChatMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMsg& from);
  void MergeFrom(const ChatMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatProtocol.ChatMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAvatarurlFieldNumber = 3,
    kContextFieldNumber = 4,
    kRoleIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes avatarurl = 3;
  void clear_avatarurl();
  const std::string& avatarurl() const;
  void set_avatarurl(const std::string& value);
  void set_avatarurl(std::string&& value);
  void set_avatarurl(const char* value);
  void set_avatarurl(const void* value, size_t size);
  std::string* mutable_avatarurl();
  std::string* release_avatarurl();
  void set_allocated_avatarurl(std::string* avatarurl);
  private:
  const std::string& _internal_avatarurl() const;
  void _internal_set_avatarurl(const std::string& value);
  std::string* _internal_mutable_avatarurl();
  public:

  // bytes context = 4;
  void clear_context();
  const std::string& context() const;
  void set_context(const std::string& value);
  void set_context(std::string&& value);
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  std::string* mutable_context();
  std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // int64 role_id = 1;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatProtocol.ChatMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatarurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  ::PROTOBUF_NAMESPACE_ID::int64 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class C2S_ChatLoad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatProtocol.C2S_ChatLoad) */ {
 public:
  C2S_ChatLoad();
  virtual ~C2S_ChatLoad();

  C2S_ChatLoad(const C2S_ChatLoad& from);
  C2S_ChatLoad(C2S_ChatLoad&& from) noexcept
    : C2S_ChatLoad() {
    *this = ::std::move(from);
  }

  inline C2S_ChatLoad& operator=(const C2S_ChatLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_ChatLoad& operator=(C2S_ChatLoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_ChatLoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_ChatLoad* internal_default_instance() {
    return reinterpret_cast<const C2S_ChatLoad*>(
               &_C2S_ChatLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C2S_ChatLoad& a, C2S_ChatLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_ChatLoad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_ChatLoad* New() const final {
    return CreateMaybeMessage<C2S_ChatLoad>(nullptr);
  }

  C2S_ChatLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_ChatLoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_ChatLoad& from);
  void MergeFrom(const C2S_ChatLoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_ChatLoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatProtocol.C2S_ChatLoad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // int64 role_id = 1;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatProtocol.C2S_ChatLoad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class S2C_ChatLoad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatProtocol.S2C_ChatLoad) */ {
 public:
  S2C_ChatLoad();
  virtual ~S2C_ChatLoad();

  S2C_ChatLoad(const S2C_ChatLoad& from);
  S2C_ChatLoad(S2C_ChatLoad&& from) noexcept
    : S2C_ChatLoad() {
    *this = ::std::move(from);
  }

  inline S2C_ChatLoad& operator=(const S2C_ChatLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_ChatLoad& operator=(S2C_ChatLoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_ChatLoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_ChatLoad* internal_default_instance() {
    return reinterpret_cast<const S2C_ChatLoad*>(
               &_S2C_ChatLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S2C_ChatLoad& a, S2C_ChatLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_ChatLoad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_ChatLoad* New() const final {
    return CreateMaybeMessage<S2C_ChatLoad>(nullptr);
  }

  S2C_ChatLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_ChatLoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_ChatLoad& from);
  void MergeFrom(const S2C_ChatLoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_ChatLoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatProtocol.S2C_ChatLoad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmsFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // repeated .ChatProtocol.ChatMsg cms = 2;
  int cms_size() const;
  private:
  int _internal_cms_size() const;
  public:
  void clear_cms();
  ::ChatProtocol::ChatMsg* mutable_cms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatProtocol::ChatMsg >*
      mutable_cms();
  private:
  const ::ChatProtocol::ChatMsg& _internal_cms(int index) const;
  ::ChatProtocol::ChatMsg* _internal_add_cms();
  public:
  const ::ChatProtocol::ChatMsg& cms(int index) const;
  ::ChatProtocol::ChatMsg* add_cms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatProtocol::ChatMsg >&
      cms() const;

  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatProtocol.S2C_ChatLoad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatProtocol::ChatMsg > cms_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class C2S_ChatChat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatProtocol.C2S_ChatChat) */ {
 public:
  C2S_ChatChat();
  virtual ~C2S_ChatChat();

  C2S_ChatChat(const C2S_ChatChat& from);
  C2S_ChatChat(C2S_ChatChat&& from) noexcept
    : C2S_ChatChat() {
    *this = ::std::move(from);
  }

  inline C2S_ChatChat& operator=(const C2S_ChatChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_ChatChat& operator=(C2S_ChatChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_ChatChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_ChatChat* internal_default_instance() {
    return reinterpret_cast<const C2S_ChatChat*>(
               &_C2S_ChatChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C2S_ChatChat& a, C2S_ChatChat& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_ChatChat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_ChatChat* New() const final {
    return CreateMaybeMessage<C2S_ChatChat>(nullptr);
  }

  C2S_ChatChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_ChatChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_ChatChat& from);
  void MergeFrom(const C2S_ChatChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_ChatChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatProtocol.C2S_ChatChat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmFieldNumber = 2,
    kRoleIdFieldNumber = 1,
  };
  // .ChatProtocol.ChatMsg cm = 2;
  bool has_cm() const;
  private:
  bool _internal_has_cm() const;
  public:
  void clear_cm();
  const ::ChatProtocol::ChatMsg& cm() const;
  ::ChatProtocol::ChatMsg* release_cm();
  ::ChatProtocol::ChatMsg* mutable_cm();
  void set_allocated_cm(::ChatProtocol::ChatMsg* cm);
  private:
  const ::ChatProtocol::ChatMsg& _internal_cm() const;
  ::ChatProtocol::ChatMsg* _internal_mutable_cm();
  public:

  // int64 role_id = 1;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatProtocol.C2S_ChatChat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ChatProtocol::ChatMsg* cm_;
  ::PROTOBUF_NAMESPACE_ID::int64 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class S2C_ChatChat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatProtocol.S2C_ChatChat) */ {
 public:
  S2C_ChatChat();
  virtual ~S2C_ChatChat();

  S2C_ChatChat(const S2C_ChatChat& from);
  S2C_ChatChat(S2C_ChatChat&& from) noexcept
    : S2C_ChatChat() {
    *this = ::std::move(from);
  }

  inline S2C_ChatChat& operator=(const S2C_ChatChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_ChatChat& operator=(S2C_ChatChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_ChatChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_ChatChat* internal_default_instance() {
    return reinterpret_cast<const S2C_ChatChat*>(
               &_S2C_ChatChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S2C_ChatChat& a, S2C_ChatChat& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_ChatChat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_ChatChat* New() const final {
    return CreateMaybeMessage<S2C_ChatChat>(nullptr);
  }

  S2C_ChatChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_ChatChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_ChatChat& from);
  void MergeFrom(const S2C_ChatChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_ChatChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatProtocol.S2C_ChatChat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // int32 ret = 1;
  void clear_ret();
  ::PROTOBUF_NAMESPACE_ID::int32 ret() const;
  void set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret() const;
  void _internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatProtocol.S2C_ChatChat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMsg

// int64 role_id = 1;
inline void ChatMsg::clear_role_id() {
  role_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatMsg::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatMsg::role_id() const {
  // @@protoc_insertion_point(field_get:ChatProtocol.ChatMsg.role_id)
  return _internal_role_id();
}
inline void ChatMsg::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  role_id_ = value;
}
inline void ChatMsg::set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:ChatProtocol.ChatMsg.role_id)
}

// bytes name = 2;
inline void ChatMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatMsg::name() const {
  // @@protoc_insertion_point(field_get:ChatProtocol.ChatMsg.name)
  return _internal_name();
}
inline void ChatMsg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ChatProtocol.ChatMsg.name)
}
inline std::string* ChatMsg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ChatProtocol.ChatMsg.name)
  return _internal_mutable_name();
}
inline const std::string& ChatMsg::_internal_name() const {
  return name_.GetNoArena();
}
inline void ChatMsg::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChatMsg::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatProtocol.ChatMsg.name)
}
inline void ChatMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatProtocol.ChatMsg.name)
}
inline void ChatMsg::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatProtocol.ChatMsg.name)
}
inline std::string* ChatMsg::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatMsg::release_name() {
  // @@protoc_insertion_point(field_release:ChatProtocol.ChatMsg.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ChatProtocol.ChatMsg.name)
}

// bytes avatarurl = 3;
inline void ChatMsg::clear_avatarurl() {
  avatarurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatMsg::avatarurl() const {
  // @@protoc_insertion_point(field_get:ChatProtocol.ChatMsg.avatarurl)
  return _internal_avatarurl();
}
inline void ChatMsg::set_avatarurl(const std::string& value) {
  _internal_set_avatarurl(value);
  // @@protoc_insertion_point(field_set:ChatProtocol.ChatMsg.avatarurl)
}
inline std::string* ChatMsg::mutable_avatarurl() {
  // @@protoc_insertion_point(field_mutable:ChatProtocol.ChatMsg.avatarurl)
  return _internal_mutable_avatarurl();
}
inline const std::string& ChatMsg::_internal_avatarurl() const {
  return avatarurl_.GetNoArena();
}
inline void ChatMsg::_internal_set_avatarurl(const std::string& value) {
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChatMsg::set_avatarurl(std::string&& value) {
  
  avatarurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatProtocol.ChatMsg.avatarurl)
}
inline void ChatMsg::set_avatarurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatProtocol.ChatMsg.avatarurl)
}
inline void ChatMsg::set_avatarurl(const void* value, size_t size) {
  
  avatarurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatProtocol.ChatMsg.avatarurl)
}
inline std::string* ChatMsg::_internal_mutable_avatarurl() {
  
  return avatarurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatMsg::release_avatarurl() {
  // @@protoc_insertion_point(field_release:ChatProtocol.ChatMsg.avatarurl)
  
  return avatarurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMsg::set_allocated_avatarurl(std::string* avatarurl) {
  if (avatarurl != nullptr) {
    
  } else {
    
  }
  avatarurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatarurl);
  // @@protoc_insertion_point(field_set_allocated:ChatProtocol.ChatMsg.avatarurl)
}

// bytes context = 4;
inline void ChatMsg::clear_context() {
  context_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatMsg::context() const {
  // @@protoc_insertion_point(field_get:ChatProtocol.ChatMsg.context)
  return _internal_context();
}
inline void ChatMsg::set_context(const std::string& value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:ChatProtocol.ChatMsg.context)
}
inline std::string* ChatMsg::mutable_context() {
  // @@protoc_insertion_point(field_mutable:ChatProtocol.ChatMsg.context)
  return _internal_mutable_context();
}
inline const std::string& ChatMsg::_internal_context() const {
  return context_.GetNoArena();
}
inline void ChatMsg::_internal_set_context(const std::string& value) {
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChatMsg::set_context(std::string&& value) {
  
  context_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatProtocol.ChatMsg.context)
}
inline void ChatMsg::set_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatProtocol.ChatMsg.context)
}
inline void ChatMsg::set_context(const void* value, size_t size) {
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatProtocol.ChatMsg.context)
}
inline std::string* ChatMsg::_internal_mutable_context() {
  
  return context_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatMsg::release_context() {
  // @@protoc_insertion_point(field_release:ChatProtocol.ChatMsg.context)
  
  return context_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMsg::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:ChatProtocol.ChatMsg.context)
}

// -------------------------------------------------------------------

// C2S_ChatLoad

// int64 role_id = 1;
inline void C2S_ChatLoad::clear_role_id() {
  role_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C2S_ChatLoad::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C2S_ChatLoad::role_id() const {
  // @@protoc_insertion_point(field_get:ChatProtocol.C2S_ChatLoad.role_id)
  return _internal_role_id();
}
inline void C2S_ChatLoad::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  role_id_ = value;
}
inline void C2S_ChatLoad::set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:ChatProtocol.C2S_ChatLoad.role_id)
}

// -------------------------------------------------------------------

// S2C_ChatLoad

// int32 ret = 1;
inline void S2C_ChatLoad::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_ChatLoad::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_ChatLoad::ret() const {
  // @@protoc_insertion_point(field_get:ChatProtocol.S2C_ChatLoad.ret)
  return _internal_ret();
}
inline void S2C_ChatLoad::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void S2C_ChatLoad::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ChatProtocol.S2C_ChatLoad.ret)
}

// repeated .ChatProtocol.ChatMsg cms = 2;
inline int S2C_ChatLoad::_internal_cms_size() const {
  return cms_.size();
}
inline int S2C_ChatLoad::cms_size() const {
  return _internal_cms_size();
}
inline void S2C_ChatLoad::clear_cms() {
  cms_.Clear();
}
inline ::ChatProtocol::ChatMsg* S2C_ChatLoad::mutable_cms(int index) {
  // @@protoc_insertion_point(field_mutable:ChatProtocol.S2C_ChatLoad.cms)
  return cms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatProtocol::ChatMsg >*
S2C_ChatLoad::mutable_cms() {
  // @@protoc_insertion_point(field_mutable_list:ChatProtocol.S2C_ChatLoad.cms)
  return &cms_;
}
inline const ::ChatProtocol::ChatMsg& S2C_ChatLoad::_internal_cms(int index) const {
  return cms_.Get(index);
}
inline const ::ChatProtocol::ChatMsg& S2C_ChatLoad::cms(int index) const {
  // @@protoc_insertion_point(field_get:ChatProtocol.S2C_ChatLoad.cms)
  return _internal_cms(index);
}
inline ::ChatProtocol::ChatMsg* S2C_ChatLoad::_internal_add_cms() {
  return cms_.Add();
}
inline ::ChatProtocol::ChatMsg* S2C_ChatLoad::add_cms() {
  // @@protoc_insertion_point(field_add:ChatProtocol.S2C_ChatLoad.cms)
  return _internal_add_cms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatProtocol::ChatMsg >&
S2C_ChatLoad::cms() const {
  // @@protoc_insertion_point(field_list:ChatProtocol.S2C_ChatLoad.cms)
  return cms_;
}

// -------------------------------------------------------------------

// C2S_ChatChat

// int64 role_id = 1;
inline void C2S_ChatChat::clear_role_id() {
  role_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C2S_ChatChat::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C2S_ChatChat::role_id() const {
  // @@protoc_insertion_point(field_get:ChatProtocol.C2S_ChatChat.role_id)
  return _internal_role_id();
}
inline void C2S_ChatChat::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  role_id_ = value;
}
inline void C2S_ChatChat::set_role_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:ChatProtocol.C2S_ChatChat.role_id)
}

// .ChatProtocol.ChatMsg cm = 2;
inline bool C2S_ChatChat::_internal_has_cm() const {
  return this != internal_default_instance() && cm_ != nullptr;
}
inline bool C2S_ChatChat::has_cm() const {
  return _internal_has_cm();
}
inline void C2S_ChatChat::clear_cm() {
  if (GetArenaNoVirtual() == nullptr && cm_ != nullptr) {
    delete cm_;
  }
  cm_ = nullptr;
}
inline const ::ChatProtocol::ChatMsg& C2S_ChatChat::_internal_cm() const {
  const ::ChatProtocol::ChatMsg* p = cm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatProtocol::ChatMsg*>(
      &::ChatProtocol::_ChatMsg_default_instance_);
}
inline const ::ChatProtocol::ChatMsg& C2S_ChatChat::cm() const {
  // @@protoc_insertion_point(field_get:ChatProtocol.C2S_ChatChat.cm)
  return _internal_cm();
}
inline ::ChatProtocol::ChatMsg* C2S_ChatChat::release_cm() {
  // @@protoc_insertion_point(field_release:ChatProtocol.C2S_ChatChat.cm)
  
  ::ChatProtocol::ChatMsg* temp = cm_;
  cm_ = nullptr;
  return temp;
}
inline ::ChatProtocol::ChatMsg* C2S_ChatChat::_internal_mutable_cm() {
  
  if (cm_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatProtocol::ChatMsg>(GetArenaNoVirtual());
    cm_ = p;
  }
  return cm_;
}
inline ::ChatProtocol::ChatMsg* C2S_ChatChat::mutable_cm() {
  // @@protoc_insertion_point(field_mutable:ChatProtocol.C2S_ChatChat.cm)
  return _internal_mutable_cm();
}
inline void C2S_ChatChat::set_allocated_cm(::ChatProtocol::ChatMsg* cm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cm_;
  }
  if (cm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cm, submessage_arena);
    }
    
  } else {
    
  }
  cm_ = cm;
  // @@protoc_insertion_point(field_set_allocated:ChatProtocol.C2S_ChatChat.cm)
}

// -------------------------------------------------------------------

// S2C_ChatChat

// int32 ret = 1;
inline void S2C_ChatChat::clear_ret() {
  ret_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_ChatChat::_internal_ret() const {
  return ret_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_ChatChat::ret() const {
  // @@protoc_insertion_point(field_get:ChatProtocol.S2C_ChatChat.ret)
  return _internal_ret();
}
inline void S2C_ChatChat::_internal_set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_ = value;
}
inline void S2C_ChatChat::set_ret(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ChatProtocol.S2C_ChatChat.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChatProtocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
